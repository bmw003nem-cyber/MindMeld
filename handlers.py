from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ReplyKeyboardRemove, ForceReply
from aiogram.dispatcher.filters import Text
from pathlib import Path

def register_handlers(dp, bot, ADMIN_ID, CHANNEL_USERNAME, WELCOME_PHOTO, DONATION_QR,
                      WELCOME_TEXT, MENTORING_TEXT, CONSULT_TEXT, GUIDES_INTRO,
                      REVIEWS_TEXT, DONATE_TEXT, CONTACT_TEXT, INSIGHT_HEADER,
                      ASSETS, log_event, is_subscribed):

    @dp.callback_query_handler(Text(startswith="menu_mentoring"))
    async def menu_mentoring(c: types.CallbackQuery):
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_mentoring"))
        kb.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu"))
        await c.message.answer(MENTORING_TEXT, reply_markup=kb); await c.answer()
        log_event(c.from_user.id, "open_mentoring")

    @dp.callback_query_handler(Text(startswith="menu_consult"))
    async def menu_consult(c: types.CallbackQuery):
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_consult"))
        kb.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu"))
        await c.message.answer(CONSULT_TEXT, reply_markup=kb); await c.answer()
        log_event(c.from_user.id, "open_consult")

    @dp.callback_query_handler(Text(startswith="menu_guides"))
    async def menu_guides(c: types.CallbackQuery):
        await c.message.answer(GUIDES_INTRO, reply_markup=_guides_menu(ASSETS)); await c.answer()
        log_event(c.from_user.id, "open_guides")

    def _guides_menu(ASSETS):
        kb = InlineKeyboardMarkup(row_width=1)
        # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º PDF –∏–∑ –ø–∞–ø–∫–∏ assets
        for p in sorted(ASSETS.glob("*.pdf")):
            kb.add(InlineKeyboardButton(p.stem.replace("_", " "), callback_data=f"guide::{p.name}"))
        kb.add(InlineKeyboardButton("–í–æ–ø—Ä–æ—Å –¥–Ω—è / –ò–Ω—Å–∞–π—Ç", callback_data="go_daily"))
        kb.add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu"))
        return kb

    @dp.callback_query_handler(Text(startswith="guide::"))
    async def send_guide(c: types.CallbackQuery):
        _, fname = c.data.split("::", 1)
        fpath = ASSETS / fname
        if not await is_subscribed(c.from_user.id):
            kb = InlineKeyboardMarkup(row_width=1)
            kb.add(
                InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"),
                InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=c.data),  # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu")
            )
            await c.message.answer("–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.", reply_markup=kb)
            await c.answer(); return

        if fpath.exists():
            await bot.send_document(c.message.chat.id, InputFile(str(fpath)), caption="–ì–∞–π–¥ –≥–æ—Ç–æ–≤ üôå")
            log_event(c.from_user.id, f"download_guide:{fname}")
        else:
            await c.message.answer("–§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É, –ø—Ä–∏—à–ª—é üôè")
        await c.answer()

    @dp.callback_query_handler(Text(startswith="menu_reviews"))
    async def menu_reviews(c: types.CallbackQuery):
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu"))
        await c.message.answer(REVIEWS_TEXT, reply_markup=kb); await c.answer()
        log_event(c.from_user.id, "open_reviews")

    @dp.callback_query_handler(Text(startswith="menu_donate"))
    async def menu_donate(c: types.CallbackQuery):
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu"))
        try:
            if Path(DONATION_QR).exists():
                await bot.send_photo(c.message.chat.id, InputFile(DONATION_QR), caption=DONATE_TEXT, reply_markup=kb)
            else:
                await c.message.answer(DONATE_TEXT, reply_markup=kb)
        except Exception:
            await c.message.answer(DONATE_TEXT, reply_markup=kb)
        await c.answer(); log_event(c.from_user.id, "open_donate")

    @dp.callback_query_handler(Text(startswith="menu_contact"))
    async def menu_contact(c: types.CallbackQuery):
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu"))
        await c.message.answer(CONTACT_TEXT, reply_markup=kb); await c.answer()
        log_event(c.from_user.id, "open_contact")

    # –∑–∞—è–≤–∫–∏
    awaiting_application = {}

    @dp.callback_query_handler(Text(startswith="apply_mentoring"))
    async def apply_mentoring(c: types.CallbackQuery):
        awaiting_application[c.from_user.id] = "–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ"
        await c.message.answer("–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å + –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫/—Ç–µ–ª–µ—Ñ–æ–Ω).", reply_markup=ReplyKeyboardRemove())
        await c.answer()

    @dp.callback_query_handler(Text(startswith="apply_consult"))
    async def apply_consult(c: types.CallbackQuery):
        awaiting_application[c.from_user.id] = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        await c.message.answer("–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å + –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫/—Ç–µ–ª–µ—Ñ–æ–Ω).", reply_markup=ReplyKeyboardRemove())
        await c.answer()

    @dp.message_handler(lambda m: m.from_user.id in awaiting_application)
    async def catch_application(m: types.Message):
        section = awaiting_application.pop(m.from_user.id, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        u = m.from_user
        admin_msg = f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n–†–∞–∑–¥–µ–ª: {section}\n–û—Ç: @{u.username or 'no_username'} (id {u.id})\n\n–¢–µ–∫—Å—Ç:\n{m.text or '(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)'}"
        try:
            await bot.send_message(ADMIN_ID, admin_msg)
        except Exception:
            pass
        await m.answer("–ü—Ä–∏–Ω—è–ª üôå –û—Ç–≤–µ—á—É –≤ –ª–∏—á–∫–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="go_menu")))
        log_event(m.from_user.id, f"send_application:{section}")
