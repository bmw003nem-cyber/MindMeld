# ---------- bot.py (–≥–æ—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–¥ config.py) ----------
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.exceptions import ChatNotFound, BadRequest

import config

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–∞–º—è—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: –∫–æ–≥–æ —É–∂–µ –ø–æ—Ä–∞–¥–æ–≤–∞–ª–∏ –≥–∞–π–¥–æ–º (–±–µ–∑ –ë–î)
issued_guide_users = set()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def back_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(config.BTN_BACK))
    return kb

def main_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        KeyboardButton(config.BTN_DAILY),
        KeyboardButton(config.BTN_SUBSCRIBE)
    )
    kb.row(
        KeyboardButton(config.BTN_GUIDES),
        KeyboardButton(config.BTN_MENTORING)
    )
    kb.row(
        KeyboardButton(config.BTN_CONSULT),
        KeyboardButton(config.BTN_SUPPORT)
    )
    kb.row(KeyboardButton(config.BTN_REVIEWS))
    return kb

def check_sub_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(config.BTN_CHECK_SUB))
    kb.add(KeyboardButton(config.BTN_BACK))
    return kb

# === –ü–û–õ–ï–ó–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def is_user_subscribed(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª CHANNEL_USERNAME.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω.
    """
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_USERNAME, user_id=user_id)
        return member.status in ("member", "administrator", "creator")
    except (ChatNotFound, BadRequest):
        # –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è False
        return False
    except Exception:
        return False

async def send_welcome(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    if os.path.exists(config.WELCOME_PHOTO):
        with open(config.WELCOME_PHOTO, "rb") as ph:
            await message.answer_photo(photo=ph, caption=config.WELCOME_MESSAGE, reply_markup=main_kb())
    else:
        await message.answer(config.WELCOME_MESSAGE, reply_markup=main_kb())

# === /start –∏ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await send_welcome(message)

@dp.message_handler(lambda m: m.text in {config.BTN_MAIN_MENU, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu"})
async def to_main(message: types.Message):
    await send_welcome(message)

# === –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø ===
@dp.message_handler(lambda m: m.text == config.BTN_CONSULT)
async def consult(message: types.Message):
    text = config.CONSULT_TEXT
    # –ö–Ω–æ–ø–∫–∞ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª = –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥ —Å —Ç–æ–±–æ–π
    ikb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url=f"https://t.me/{config.ADMIN_USERNAME.lstrip('@')}")
    )
    await message.answer(text, reply_markup=back_kb())
    await message.answer("–ì–æ—Ç–æ–≤ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å üëá", reply_markup=ikb)

# === –ù–ê–°–¢–ê–í–ù–ò–ß–ï–°–¢–í–û ===
@dp.message_handler(lambda m: m.text == config.BTN_MENTORING)
async def mentoring(message: types.Message):
    await message.answer(config.MENTORING_TEXT, reply_markup=back_kb())

# === –û–¢–ó–´–í–´ ===
@dp.message_handler(lambda m: m.text == config.BTN_REVIEWS)
async def reviews(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=1)
    ikb.add(
        InlineKeyboardButton("üìå –ü–æ—Å—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏", url=config.REVIEWS_POST_URL),
        InlineKeyboardButton("üí¨ –ß–∞—Ç/–∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url=config.REVIEWS_CHAT_URL),
    )
    await message.answer("–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–ª –æ—Ç–∑—ã–≤—ã:", reply_markup=back_kb())
    await message.answer("–í—ã–±–µ—Ä–∏:", reply_markup=ikb)

# === –ü–û–î–î–ï–†–ñ–ê–¢–¨ ===
@dp.message_handler(lambda m: m.text == config.BTN_SUPPORT)
async def support(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∏–º QR, –µ—Å–ª–∏ –ª–µ–∂–∏—Ç –≤ assets
    if os.path.exists(config.DONATION_QR_IMAGE):
        with open(config.DONATION_QR_IMAGE, "rb") as ph:
            await message.answer_photo(ph, caption=config.DONATE_TEXT, reply_markup=back_kb())
    else:
        await message.answer(config.DONATE_TEXT, reply_markup=back_kb())

# === –ü–û–î–ü–ò–°–ö–ê –ù–ê –†–ê–°–°–´–õ–ö–£ (–∑–∞–≥–ª—É—à–∫–∞) ===
@dp.message_handler(lambda m: m.text == config.BTN_SUBSCRIBE)
async def subscribe_info(message: types.Message):
    await message.answer(
        "üîî –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞. –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´–í–æ–ø—Ä–æ—Å –¥–Ω—è¬ª ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å –º–∏–Ω–∏‚Äë—Ñ–æ–∫—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
        reply_markup=back_kb()
    )

# === –ì–ê–ô–î–´ (–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏) ===
@dp.message_handler(lambda m: m.text == config.BTN_GUIDES)
async def guides_entry(message: types.Message):
    uid = message.from_user.id
    if uid in issued_guide_users:
        await message.answer("–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –≥–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ üòä", reply_markup=back_kb())
        return

    await message.answer(config.GUIDES_NOTICE, reply_markup=check_sub_kb())

@dp.message_handler(lambda m: m.text == config.BTN_CHECK_SUB)
async def guides_check_sub(message: types.Message):
    uid = message.from_user.id
    subscribed = await is_user_subscribed(uid)
    if not subscribed:
        await message.answer(
            f"–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {config.CHANNEL_USERNAME} –µ—â—ë –Ω–µ—Ç.\n"
            "–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.", reply_markup=check_sub_kb()
        )
        return

    # –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å ‚Äî –≤—ã–¥–∞—ë–º –æ–¥–∏–Ω –≥–∞–π–¥ –Ω–∞ –≤—ã–±–æ—Ä (–±–µ–∑ –ë–î, –ø—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª)
    # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å: —Å–¥–µ–ª–∞—Ç—å –∏–Ω–ª–∞–π–Ω‚Äë–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö PDF
    guide_path = "guide_path_to_self.pdf"  # –ø—Ä–∏–º–µ—Ä: –æ–¥–∏–Ω –≥–∞–π–¥
    if not os.path.exists(guide_path):
        await message.answer("–§–∞–π–ª –≥–∞–π–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –°–æ–æ–±—â–∏ –º–Ω–µ, —è –ø–æ–ø—Ä–∞–≤–ª—é üôè", reply_markup=back_kb())
        return

    with open(guide_path, "rb") as f:
        await message.answer_document(f, caption="–¢–≤–æ–π –≥–∞–π–¥. –ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏! ‚ú®", reply_markup=back_kb())

    issued_guide_users.add(uid)
    await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞—é: —è –≤—ã–¥–∞—é <b>–æ–¥–∏–Ω</b> –≥–∞–π–¥ –Ω–∞ –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å üôå")

# === –í–û–ü–†–û–° –î–ù–Ø ===
QUESTION_TEXT = "üß† –í–æ–ø—Ä–æ—Å –¥–Ω—è\n\n–ö–∞–∫–∞—è –º—ã—Å–ª—å —á–∞—â–µ –≤—Å–µ–≥–æ —Ç–æ—Ä–º–æ–∑–∏—Ç —Ç–µ–±—è?\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:"
OPTIONS = [
    "¬´–Ø –Ω–µ —É—Å–ø–µ—é¬ª",
    "¬´–ù–µ –∏–¥–µ–∞–ª—å–Ω–æ ‚Äî –Ω–µ –¥–µ–ª–∞—Ç—å¬ª",
    "¬´–ß—Ç–æ —Å–∫–∞–∂—É—Ç –¥—Ä—É–≥–∏–µ?¬ª",
    "¬´–Ø –ø–æ—Ç–æ–º¬ª",
]

@dp.message_handler(lambda m: m.text == config.BTN_DAILY)
async def daily_question(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(OPTIONS):
        ikb.add(InlineKeyboardButton(opt, callback_data=f"q:{i}"))
    await message.answer(QUESTION_TEXT, reply_markup=ikb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("q:"))
async def daily_answer(call: types.CallbackQuery):
    idx = int(call.data.split(":")[1])
    choice = OPTIONS[idx]
    tips = {
        0: "–ü–æ–ø—Ä–æ–±—É–π –ø–ª–∞–Ω –Ω–∞ 15‚Äì30 –º–∏–Ω—É—Ç. –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ ‚Äî —Ç–æ–∂–µ —à–∞–≥.",
        1: "–°–¥–µ–ª–∞–π –Ω–∞ 70% –∏ –æ—Ç–ø—Ä–∞–≤—å. –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ ‚Äî —Ç–æ–Ω–Ω–∞ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏.",
        2: "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ–±—è –∏ –±–ª–∏–∑–∫–∏—Ö. –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–≥–æ–Ω—è—Ç.",
        3: "–ù–∞–∑–Ω–∞—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 19:00 ‚Äî 20 –º–∏–Ω—É—Ç¬ª –∏ –Ω–∞—á–Ω–∏.",
    }
    await call.message.answer(
        f"–¢—ã –≤—ã–±—Ä–∞–ª: <b>{choice}</b>\n\n–ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–æ–∫—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n‚Äî {tips.get(idx, '–î–µ–π—Å—Ç–≤—É–π –∫–æ—Ä–æ—Ç–∫–æ –∏ —Å—Ä–∞–∑—É.')}",
        reply_markup=main_kb()
    )
    await call.answer()

# === ¬´–ù–ê–ó–ê–î¬ª ===
@dp.message_handler(lambda m: m.text == config.BTN_BACK)
async def back(message: types.Message):
    await send_welcome(message)

# === –§–û–õ–õ–ë–≠–ö ===
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def fallback(message: types.Message):
    # –Ω–∞ –ª—é–±–æ–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ ‚Äî –¥–∞—ë–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_kb())

# === –°–¢–ê–†–¢ ===
async def on_startup(dp: Dispatcher):
    # —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã polling –±—ã–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∞–ø–¥–µ–π—Ç–æ–≤
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏ –ª–æ–≥ ¬´–±–æ—Ç –∑–∞–ø—É—â–µ–Ω¬ª
    # await bot.send_message(config.ADMIN_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    # –í–∞–∂–Ω–æ: –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ start_polling
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
