# ========================  BOT  ============================
import os
import csv
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor

from config import (
    BOT_TOKEN, ADMIN_ID,
    CHANNEL_USERNAME, START_TEXT,
    MENTORING_TEXT, CONSULTATION_TEXT,
    SUPPORT_TEXT, CONTACT_TEXT, SUBSCRIBE_TEXT, QOD_INTRO,
    WELCOME_PHOTO, DONATION_QR,
    GUIDES, REVIEWS_URL, SUBSCRIBE_URL, CONTACT_URL,
    BTN_MENTORING, BTN_CONSULTATION, BTN_GUIDES, BTN_QOD,
    BTN_REVIEWS, BTN_SUPPORT, BTN_CONTACT, BTN_SUBSCRIBE,
    BTN_BACK, BTN_LEAVE_REQUEST,
    SUPPORT_QR_CAPTION
)

# -----------------------------------------------------------
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

EVENTS_CSV = "events.csv"
users_with_guide = set()  # user_id, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω –≥–∞–π–¥

# ======================  –£–¢–ò–õ–ò–¢–´  ==========================
def log_event(user_id: int, event: str, details: str = ""):
    row = [datetime.now().isoformat(timespec="seconds"), str(user_id), event, details]
    new_file = not os.path.exists(EVENTS_CSV)
    with open(EVENTS_CSV, "a", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        if new_file:
            w.writerow(["timestamp", "user_id", "event", "details"])
        w.writerow(row)

def restore_guide_state():
    if not os.path.exists(EVENTS_CSV):
        return
    try:
        with open(EVENTS_CSV, "r", encoding="utf-8") as f:
            r = csv.DictReader(f)
            for row in r:
                if row.get("event") == "guide_sent":
                    users_with_guide.add(int(row.get("user_id", "0") or "0"))
    except Exception:
        pass

async def is_user_subscribed(user_id: int) -> bool:
    try:
        m = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return m.status in ("member", "administrator", "creator")
    except Exception:
        return False

# ======================  –ö–ù–û–ü–ö–ò  ===========================
def back_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

def main_menu_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(BTN_QOD, callback_data="qod"),
        InlineKeyboardButton(BTN_SUBSCRIBE, url=SUBSCRIBE_URL),
    )
    kb.add(
        InlineKeyboardButton(BTN_MENTORING, callback_data="mentoring"),
        InlineKeyboardButton(BTN_CONSULTATION, callback_data="consult"),
    )
    kb.add(
        InlineKeyboardButton(BTN_GUIDES, callback_data="guides"),
        InlineKeyboardButton(BTN_REVIEWS, url=REVIEWS_URL),
    )
    kb.add(
        InlineKeyboardButton(BTN_SUPPORT, callback_data="support"),
        InlineKeyboardButton(BTN_CONTACT, url=CONTACT_URL),
    )
    return kb

def leave_request_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(BTN_LEAVE_REQUEST, url=CONTACT_URL))
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

def guides_menu_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for i, (title, _) in enumerate(GUIDES):
        kb.add(InlineKeyboardButton(title, callback_data=f"guide:{i}"))
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

# ===================  –í–û–ü–†–û–° –î–ù–Ø  =========================
QUESTION = "–ö–∞–∫–∞—è –º—ã—Å–ª—å —á–∞—â–µ –≤—Å–µ–≥–æ —Ç–æ—Ä–º–æ–∑–∏—Ç —Ç–µ–±—è?"
OPTIONS = [
    "¬´–Ø –Ω–µ —É—Å–ø–µ—é¬ª",
    "¬´–ù–µ –∏–¥–µ–∞–ª—å–Ω–æ ‚Äî –Ω–µ –¥–µ–ª–∞—Ç—å¬ª",
    "¬´–ß—Ç–æ —Å–∫–∞–∂—É—Ç –¥—Ä—É–≥–∏–µ?¬ª",
    "¬´–Ø –ø–æ—Ç–æ–º¬ª",
]

def qod_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(OPTIONS):
        kb.add(InlineKeyboardButton(opt, callback_data=f"qod_opt:{i}"))
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

MINI_TASKS = [
    "–ó–∞–ø–∏—à–∏ –æ–¥–∏–Ω —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–π–º—ë—Ç ‚â§10 –º–∏–Ω—É—Ç, –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è.",
    "–ó–∞–ø–∏—à–∏ 3 –≤—ã–≥–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—à—å –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è. –í–µ—Ä–Ω–∏—Å—å –∫ —Å–ø–∏—Å–∫—É –≤–µ—á–µ—Ä–æ–º.",
    "–°–ø—Ä–æ—Å–∏ —Å–µ–±—è: ¬´–ß—Ç–æ —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –∑–∞ 5 –º–∏–Ω—É—Ç?¬ª ‚Äî –∏ —Å–¥–µ–ª–∞–π —ç—Ç–æ.",
    "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ —É–±–µ–∂–¥–µ–Ω–∏–µ-–≤–æ–ø—Ä–æ—Å: ¬´–ê –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è? –ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?¬ª",
]

# ==================  /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  =================
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if os.path.exists(WELCOME_PHOTO):
        try:
            await message.answer_photo(
                photo=InputFile(WELCOME_PHOTO),
                caption=START_TEXT,
                reply_markup=main_menu_kb()
            )
            return
        except Exception:
            pass
    await message.answer(START_TEXT, reply_markup=main_menu_kb())

@dp.callback_query_handler(lambda c: c.data == "menu")
async def cb_menu(call: types.CallbackQuery):
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await call.answer()

# ===================  –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ  ======================
@dp.callback_query_handler(lambda c: c.data == "mentoring")
async def cb_mentoring(call: types.CallbackQuery):
    await call.message.answer(MENTORING_TEXT, reply_markup=leave_request_kb())
    await call.answer()

# =====================  –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è  =======================
@dp.callback_query_handler(lambda c: c.data == "consult")
async def cb_consult(call: types.CallbackQuery):
    await call.message.answer(CONSULTATION_TEXT, reply_markup=leave_request_kb())
    await call.answer()

# =========================  –ì–∞–π–¥—ã  ==========================
@dp.callback_query_handler(lambda c: c.data == "guides")
async def cb_guides(call: types.CallbackQuery):
    uid = call.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await is_user_subscribed(uid):
        text = (
            f"{SUBSCRIBE_TEXT}\n\n"
            f"‚ö†Ô∏è –í—ã–¥–∞—á–∞ –≥–∞–π–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª."
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(BTN_SUBSCRIBE, url=SUBSCRIBE_URL))
        kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
        await call.message.answer(text, reply_markup=kb)
        await call.answer()
        return

    # —É–∂–µ –ø–æ–ª—É—á–∞–ª –≥–∞–π–¥
    if uid in users_with_guide:
        await call.message.answer(
            "–¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —Å–≤–æ–π –≥–∞–π–¥. üîí –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞.",
            reply_markup=back_kb()
        )
        await call.answer()
        return

    await call.message.answer(
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –≥–∞–π–¥.\n\n<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ <b>–æ–¥–∏–Ω</b> –≥–∞–π–¥.",
        reply_markup=guides_menu_kb()
    )
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("guide:"))
async def cb_guide_download(call: types.CallbackQuery):
    uid = call.from_user.id

    # –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã/–≥–æ–Ω–∫–∏
    if uid in users_with_guide:
        await call.message.answer(
            "–£–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≥–∞–π–¥–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=back_kb()
        )
        await call.answer()
        return

    if not await is_user_subscribed(uid):
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(BTN_SUBSCRIBE, url=SUBSCRIBE_URL))
        kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
        await call.message.answer(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞–∂–º–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=kb
        )
        await call.answer()
        return

    idx = int(call.data.split(":")[1])
    title, filename = GUIDES[idx]
    if not os.path.exists(filename):
        await call.message.answer(
            f"–§–∞–π–ª <b>{filename}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_kb()
        )
        await call.answer()
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ñ–∏–∫—Å–∏—Ä—É–µ–º, –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º
    try:
        await call.message.answer_document(
            InputFile(filename),
            caption=f"¬´{title}¬ª",
            reply_markup=back_kb()
        )
        users_with_guide.add(uid)
        log_event(uid, "guide_sent", filename)
    except Exception as e:
        await call.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}", reply_markup=back_kb())
    await call.answer()

# =====================  –í–æ–ø—Ä–æ—Å –¥–Ω—è  =========================
@dp.callback_query_handler(lambda c: c.data == "qod")
async def cb_qod(call: types.CallbackQuery):
    text = f"{QOD_INTRO}\n<b>{QUESTION}</b>\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:"
    await call.message.answer(text, reply_markup=qod_kb())
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("qod_opt:"))
async def cb_qod_answer(call: types.CallbackQuery):
    idx = int(call.data.split(":")[1])
    choice = OPTIONS[idx]
    mini = MINI_TASKS[idx % len(MINI_TASKS)]
    await call.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª: <b>{choice}</b>\n\n"
        f"üî• –ú–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ: {mini}",
        reply_markup=back_kb()
    )
    await call.answer()

# =====================  –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å  =========================
@dp.callback_query_handler(lambda c: c.data == "support")
async def cb_support(call: types.CallbackQuery):
    if os.path.exists(DONATION_QR):
        try:
            await call.message.answer_photo(
                photo=InputFile(DONATION_QR),
                caption=f"{SUPPORT_QR_CAPTION}\n\n{SUPPORT_TEXT}",
                reply_markup=back_kb()
            )
            await call.answer()
            return
        except Exception:
            pass
    await call.message.answer(SUPPORT_TEXT, reply_markup=back_kb())
    await call.answer()

# ===================  Keep‚ÄëAlive –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä  ================
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(b'{"status":"ok","service":"telegram_bot"}')

    def log_message(self, *args):
        return

def run_keepalive():
    port = int(os.environ.get("PORT", "10000"))
    HTTPServer(("0.0.0.0", port), HealthHandler).serve_forever()

# ========================  START  ===========================
async def on_startup(_):
    # –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –±—ã–ª –¢–û–õ–¨–ö–û long polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    restore_guide_state()

if __name__ == "__main__":
    Thread(target=run_keepalive, daemon=True).start()
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
