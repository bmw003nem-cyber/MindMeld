# ========================  BOT  ============================
import os
import json
import asyncio
from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from aiogram.utils import executor

from config import (
    BOT_TOKEN, ADMIN_ID,
    CHANNEL_USERNAME, START_TEXT,
    MENTORING_TEXT, CONSULTATION_TEXT,
    SUPPORT_TEXT, CONTACT_TEXT, SUBSCRIBE_TEXT, QOD_INTRO,
    WELCOME_PHOTO, DONATION_QR,
    GUIDES, REVIEWS_URL, SUBSCRIBE_URL, CONTACT_URL,
    BTN_MENTORING, BTN_CONSULTATION, BTN_GUIDES, BTN_QOD,
    BTN_REVIEWS, BTN_SUPPORT, BTN_CONTACT, BTN_SUBSCRIBE,
    BTN_BACK, BTN_LEAVE_REQUEST,
    SUPPORT_QR_CAPTION
)

# -----------------------------------------------------------
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ======================  –ö–ù–û–ü–ö–ò  ===========================

def back_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

def main_menu_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(BTN_QOD, callback_data="qod"),
        InlineKeyboardButton(BTN_SUBSCRIBE, url=SUBSCRIBE_URL),
    )
    kb.add(
        InlineKeyboardButton(BTN_MENTORING, callback_data="mentoring"),
        InlineKeyboardButton(BTN_CONSULTATION, callback_data="consult"),
    )
    kb.add(
        InlineKeyboardButton(BTN_GUIDES, callback_data="guides"),
        InlineKeyboardButton(BTN_REVIEWS, url=REVIEWS_URL),
    )
    kb.add(
        InlineKeyboardButton(BTN_SUPPORT, callback_data="support"),
        InlineKeyboardButton(BTN_CONTACT, url=CONTACT_URL),
    )
    return kb

def leave_request_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(BTN_LEAVE_REQUEST, url=CONTACT_URL))
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

def guides_menu_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for i, (title, _) in enumerate(GUIDES):
        kb.add(InlineKeyboardButton(title, callback_data=f"guide:{i}"))
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

# ===================  –í–û–ü–†–û–° –î–ù–Ø  =========================
QUESTION = "–ö–∞–∫–∞—è –º—ã—Å–ª—å —á–∞—â–µ –≤—Å–µ–≥–æ —Ç–æ—Ä–º–æ–∑–∏—Ç —Ç–µ–±—è?"
OPTIONS = [
    "¬´–Ø –Ω–µ —É—Å–ø–µ—é¬ª",
    "¬´–ù–µ –∏–¥–µ–∞–ª—å–Ω–æ ‚Äî –Ω–µ –¥–µ–ª–∞—Ç—å¬ª",
    "¬´–ß—Ç–æ —Å–∫–∞–∂—É—Ç –¥—Ä—É–≥–∏–µ?¬ª",
    "¬´–Ø –ø–æ—Ç–æ–º¬ª",
]

def qod_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(OPTIONS):
        kb.add(InlineKeyboardButton(opt, callback_data=f"qod_opt:{i}"))
    kb.add(InlineKeyboardButton(BTN_BACK, callback_data="menu"))
    return kb

MINI_TASKS = [
    "–ó–∞–ø–∏—à–∏ –æ–¥–∏–Ω —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–π–º—ë—Ç ‚â§10 –º–∏–Ω—É—Ç, –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è.",
    "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π 3 –≤—ã–≥–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–¥—É—Ç –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è. –í–µ—Ä–Ω–∏—Å—å –∫ –Ω–∏–º –≤–µ—á–µ—Ä–æ–º.",
    "–°–ø—Ä–æ—Å–∏ —Å–µ–±—è: ¬´–ß—Ç–æ —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –∑–∞ 5 –º–∏–Ω—É—Ç?¬ª ‚Äî –∏ —Å–¥–µ–ª–∞–π —ç—Ç–æ.",
    "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ —É–±–µ–∂–¥–µ–Ω–∏–µ-–≤–æ–ø—Ä–æ—Å: ¬´–ê –µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è? –ß—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?¬ª",
]

# ==================  /start –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  =================
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–∏–≤–µ—Ç-—Ñ–æ—Ç–æ
    if os.path.exists(WELCOME_PHOTO):
        try:
            await message.answer_photo(
                photo=InputFile(WELCOME_PHOTO),
                caption=START_TEXT,
                reply_markup=main_menu_kb()
            )
            return
        except Exception:
            pass
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å ‚Äì –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    await message.answer(START_TEXT, reply_markup=main_menu_kb())

# -------------------- –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –º–µ–Ω—é ---------------------
@dp.callback_query_handler(lambda c: c.data == "menu")
async def cb_menu(call: types.CallbackQuery):
    await call.message.edit_reply_markup()  # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await call.answer()

# ===================  –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ  ======================
@dp.callback_query_handler(lambda c: c.data == "mentoring")
async def cb_mentoring(call: types.CallbackQuery):
    await call.message.answer(MENTORING_TEXT, reply_markup=leave_request_kb())
    await call.answer()

# =====================  –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è  =======================
@dp.callback_query_handler(lambda c: c.data == "consult")
async def cb_consult(call: types.CallbackQuery):
    await call.message.answer(CONSULTATION_TEXT, reply_markup=leave_request_kb())
    await call.answer()

# =========================  –ì–∞–π–¥—ã  ==========================
@dp.callback_query_handler(lambda c: c.data == "guides")
async def cb_guides(call: types.CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏ –≥–∞–π–¥:", reply_markup=guides_menu_kb())
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("guide:"))
async def cb_guide_download(call: types.CallbackQuery):
    idx = int(call.data.split(":")[1])
    title, filename = GUIDES[idx]
    if not os.path.exists(filename):
        await call.message.answer(f"–§–∞–π–ª <b>{filename}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.", reply_markup=back_kb())
        await call.answer()
        return
    try:
        await call.message.answer_document(
            document=InputFile(filename),
            caption=f"¬´{title}¬ª",
            reply_markup=back_kb()
        )
    except Exception as e:
        await call.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}", reply_markup=back_kb())
    await call.answer()

# =====================  –í–æ–ø—Ä–æ—Å –¥–Ω—è  =========================
@dp.callback_query_handler(lambda c: c.data == "qod")
async def cb_qod(call: types.CallbackQuery):
    text = f"{QOD_INTRO}\n<b>{QUESTION}</b>\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:"
    await call.message.answer(text, reply_markup=qod_kb())
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("qod_opt:"))
async def cb_qod_answer(call: types.CallbackQuery):
    idx = int(call.data.split(":")[1])
    choice = OPTIONS[idx]
    mini = MINI_TASKS[idx % len(MINI_TASKS)]
    await call.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª: <b>{choice}</b>\n\n"
        f"üî• –ú–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ: {mini}",
        reply_markup=back_kb()
    )
    await call.answer()

# =====================  –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å  =========================
@dp.callback_query_handler(lambda c: c.data == "support")
async def cb_support(call: types.CallbackQuery):
    if os.path.exists(DONATION_QR):
        try:
            await call.message.answer_photo(
                photo=InputFile(DONATION_QR),
                caption=f"{SUPPORT_QR_CAPTION}\n\n{SUPPORT_TEXT}",
                reply_markup=back_kb()
            )
            await call.answer()
            return
        except Exception:
            pass
    await call.message.answer(SUPPORT_TEXT, reply_markup=back_kb())
    await call.answer()

# =====================  –ü–æ–¥–ø–∏—Å–∫–∞ / –°–≤—è–∑–∞—Ç—å—Å—è  ===============
@dp.message_handler(commands=["contact"])
async def cmd_contact(message: types.Message):
    await message.answer(CONTACT_TEXT, reply_markup=back_kb())

# ===================  Keep‚ÄëAlive –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä  ================
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(b'{"status":"ok","service":"telegram_bot"}')

    def log_message(self, format, *args):
        # –ø–æ–¥–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–æ–≥ HTTP‚Äë—Å–µ—Ä–≤–µ—Ä–∞
        return

def run_keepalive():
    port = int(os.environ.get("PORT", "10000"))
    httpd = HTTPServer(("0.0.0.0", port), HealthHandler)
    try:
        httpd.serve_forever()
    except Exception:
        pass

# ========================  START  ===========================
if __name__ == "__main__":
    # –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ ¬´health¬ª –¥–ª—è Render, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å port scan timeout
    Thread(target=run_keepalive, daemon=True).start()

    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
