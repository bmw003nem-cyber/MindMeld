# -*- coding: utf-8 -*-
"""
MindMeld ‚Äî –±–æ—Ç —Å ¬´–í–æ–ø—Ä–æ—Å–æ–º –¥–Ω—è 2.0¬ª
- /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –º–µ–Ω—é
- –ö–Ω–æ–ø–∫–∞ ¬´–í–æ–ø—Ä–æ—Å –¥–Ω—è¬ª ‚Äî –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
- –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –º–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ events.csv
- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ–ø—Ä–æ—Å–∞
- Keep-alive –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä (Render –∂–¥—ë—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç)
- –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ—è—Ö
"""

import os
import csv
import json
import time
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, date

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler

# ===================== –ö–û–ù–§–ò–ì =====================

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –ø—É—Å—Ç. –ó–∞–¥–∞–π –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")

# –ü–∞–ø–∫–∞ —Å –∞—Å—Å–µ—Ç–∞–º–∏ (–∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/QR –∏ —Ç.–¥.)
ASSETS_DIR = "assets"
WELCOME_PHOTO = os.path.join(ASSETS_DIR, "welcome.jpg.jpg")  # –∫–∞–∫ —É —Ç–µ–±—è –≤ —Ä–µ–ø–æ
DONATION_QR = os.path.join(ASSETS_DIR, "donation_qr.png")

# –ö–∞–Ω–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ)
CHANNEL_USERNAME = "@vse_otvety_vnutri_nas"

# –§–∞–π–ª –ª–æ–≥–æ–≤
EVENTS_CSV = "events.csv"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–µ; –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª/–ë–î)
daily_subscribers = set()

# ===================== –ö–û–ù–¢–ï–ù–¢ ¬´–í–û–ü–†–û–° –î–ù–Ø 2.0¬ª =====================

# –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å: {text, options, tasks}
# options ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤; tasks ‚Äî —Å–ª–æ–≤–∞—Ä—å {index->—Ç–µ–∫—Å—Ç –º–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏—è}
QUESTIONS = [
    {
        "text": "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
        "options": ["–°–¥–µ–ª–∞—Ç—å —à–∞–≥ –∫ —Ü–µ–ª–∏", "–ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–µ–ª–µ", "–°–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å", "–û–±—â–µ–Ω–∏–µ —Å –±–ª–∏–∑–∫–∏–º–∏"],
        "tasks": {
            0: "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏, –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –¥–æ –≤–µ—á–µ—Ä–∞.",
            1: "–°–¥–µ–ª–∞–π 20‚Äë–º–∏–Ω—É—Ç–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É –∏–ª–∏ —Ä–∞–∑–º–∏–Ω–∫—É + 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã.",
            2: "–°–¥–µ–ª–∞–π 10‚Äë–º–∏–Ω—É—Ç–Ω—É—é –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.",
            3: "–ù–∞–ø–∏—à–∏ –æ–¥–Ω–æ–º—É –≤–∞–∂–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É —Ç—ë–ø–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–≤—Å—Ç—Ä–µ—á—É."
        }
    },
    {
        "text": "–ö–∞–∫–∞—è –º—ã—Å–ª—å —á–∞—â–µ –≤—Å–µ–≥–æ —Ç–æ—Ä–º–æ–∑–∏—Ç —Ç–µ–±—è?",
        "options": ["¬´–Ø –Ω–µ —É—Å–ø–µ—é¬ª", "¬´–ù–µ –∏–¥–µ–∞–ª—å–Ω–æ ‚Äî –Ω–µ –¥–µ–ª–∞—Ç—å¬ª", "¬´–ß—Ç–æ —Å–∫–∞–∂—É—Ç –¥—Ä—É–≥–∏–µ?¬ª", "¬´–Ø –ø–æ—Ç–æ–º¬ª"],
        "tasks": {
            0: "–í—ã–¥–µ–ª–∏ 25 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –æ—Ç–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–µ—Ö–Ω–∏–∫–∞ Pomodoro).",
            1: "–°–¥–µ–ª–∞–π –º–∏–Ω–∏‚Äë—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 30 –º–∏–Ω—É—Ç. –ù–µ –∏–¥–µ–∞–ª—å–Ω–æ ‚Äî –Ω–æ —Å–¥–µ–ª–∞–π.",
            2: "–°–¥–µ–ª–∞–π –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–∏—Ö–æ –¥–ª—è —Å–µ–±—è. –ù–∏–∫–∞–∫–∏—Ö –æ—Ç—á—ë—Ç–æ–≤ –¥—Ä—É–≥–∏–º.",
            3: "–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –¥–µ–ª–æ –∏ —Å–¥–µ–ª–∞–π –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç."
        }
    },
    {
        "text": "–ì–¥–µ —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏?",
        "options": ["–¢–µ–ª–æ", "–î–µ–ª–æ/—Ä–∞–±–æ—Ç–∞", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–¢–∏—à–∏–Ω–∞/–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ"],
        "tasks": {
            0: "–°–¥–µ–ª–∞–π 30 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π/–æ—Ç–∂–∏–º–∞–Ω–∏–π/—Ç—è–≥—É —Ä–µ–∑–∏–Ω–∫–∏ ‚Äî —á—Ç–æ —É–≥–æ–¥–Ω–æ –Ω–∞ 10 –º–∏–Ω—É—Ç.",
            1: "–û–ø—Ä–µ–¥–µ–ª–∏ 1 –∫–ª—é—á–µ–≤—É—é –∑–∞–¥–∞—á—É –∏ —Å–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ (‚â§15 –º–∏–Ω—É—Ç).",
            2: "–ù–∞–∑–Ω–∞—á—å –≤—Å—Ç—Ä–µ—á—É/–∑–≤–æ–Ω–æ–∫/—Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –¥–µ–ª–æ —Å –≤–∞–∂–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º.",
            3: "–í—ã–∫–ª—é—á–∏ –≤—Å—ë –Ω–∞ 20 –º–∏–Ω—É—Ç –∏ –ø–æ–±—É–¥—å –≤ —Ç–∏—à–∏–Ω–µ. –ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        }
    },
    # –î–æ–±–∞–≤–∏—à—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏‚Ä¶
]


# ===================== –£–¢–ò–õ–ò–¢–´ =====================

def ensure_events_csv():
    if not os.path.exists(EVENTS_CSV):
        with open(EVENTS_CSV, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp", "user_id", "event", "details"])

def log_event(user_id: int, event: str, details: str = ""):
    ensure_events_csv()
    with open(EVENTS_CSV, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now().isoformat(timespec="seconds"), user_id, event, details])

def day_index() -> int:
    """–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ –¥–µ–Ω—å (—á—Ç–æ–±—ã —É –≤—Å–µ—Ö –±—ã–ª –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å)"""
    return (date.today().toordinal()) % len(QUESTIONS)

# ===================== –ë–û–¢ =====================

bot = Bot(BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def main_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üß† –í–æ–ø—Ä–æ—Å –¥–Ω—è", callback_data="menu:qod"),
        InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="menu:sub"),
    )
    kb.add(
        InlineKeyboardButton("üì© –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="menu:unsub"),
        InlineKeyboardButton("üìï –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="menu:mentoring"),
    )
    kb.add(
        InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", url="https://t.me/your_reviews_link"),
        InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="menu:donate"),
    )
    return kb

def question_keyboard(q_idx: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    for i, opt in enumerate(QUESTIONS[q_idx]["options"]):
        kb.add(InlineKeyboardButton(f"‚Ä¢ {opt}", callback_data=f"q:{q_idx}:{i}"))
    return kb

# ---------- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ----------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    log_event(user_id, "start", "user started bot")
    text = (
        "–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ!\n\n"
        "–ó–¥–µ—Å—å ‚Äî –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, —ç–Ω–µ—Ä–≥–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.\n"
        "–ù–∞—á–Ω–∏ —Å <b>–í–æ–ø—Ä–æ—Å–∞ –¥–Ω—è</b> ‚Äî –æ–¥–∏–Ω –∫–ª–∏–∫, –∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ–æ–∫—É—Å + –º–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
    )
    if os.path.exists(WELCOME_PHOTO):
        try:
            with open(WELCOME_PHOTO, "rb") as p:
                await message.answer_photo(p, caption=text, reply_markup=main_menu())
        except Exception:
            await message.answer(text, reply_markup=main_menu())
    else:
        await message.answer(text, reply_markup=main_menu())

# ---------- –ú–µ–Ω—é ----------
@dp.callback_query_handler(lambda c: c.data.startswith("menu:"))
async def on_menu(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    action = call.data.split(":", 1)[1]

    if action == "qod":
        await send_question(call.message.chat.id)
        return

    if action == "sub":
        daily_subscribers.add(user_id)
        log_event(user_id, "subscribe_daily")
        await call.message.answer("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤–∫–ª—é—á–µ–Ω–∞. "
                                  "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å ¬´–í–æ–ø—Ä–æ—Å –¥–Ω—è¬ª.")
        return

    if action == "unsub":
        daily_subscribers.discard(user_id)
        log_event(user_id, "unsubscribe_daily")
        await call.message.answer("üîï –û—Ç–ø–∏—Å–∞–ª –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ ¬´–í–æ–ø—Ä–æ—Å –¥–Ω—è¬ª.")
        return

    if action == "mentoring":
        await call.message.answer(MENTORING_TEXT, reply_markup=mentoring_menu())
        return

    if action == "donate":
        if os.path.exists(DONATION_QR):
            with open(DONATION_QR, "rb") as q:
                await call.message.answer_photo(q, caption=DONATE_TEXT)
        else:
            await call.message.answer(DONATE_TEXT)
        return

# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ----------
async def send_question(chat_id: int):
    idx = day_index()
    q = QUESTIONS[idx]
    text = f"üß† <b>–í–æ–ø—Ä–æ—Å –¥–Ω—è</b>\n\n{q['text']}\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:"
    await bot.send_message(chat_id, text, reply_markup=question_keyboard(idx))

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ----------
@dp.callback_query_handler(lambda c: c.data.startswith("q:"))
async def on_answer(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    _, s_idx, s_opt = call.data.split(":")
    idx = int(s_idx)
    opt = int(s_opt)
    q = QUESTIONS[idx]
    choice = q["options"][opt]
    task = q["tasks"].get(opt, "–°–¥–µ–ª–∞–π –æ–¥–∏–Ω –º–∞–ª—ã–π —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–±–ª–∏–∑–∏—Ç —Ç–µ–±—è –∫ –≤–∞–∂–Ω–æ–º—É.")

    # –ª–æ–≥
    log_event(user_id, "qod_answer", json.dumps({"q_idx": idx, "option": opt, "choice": choice}, ensure_ascii=False))

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –º–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ
    await call.message.answer(
        f"‚úÖ <b>–ó–∞–ø–∏—Å–∞–ª!</b> –¢—ã –≤—ã–±—Ä–∞–ª: ¬´{choice}¬ª.\n\n"
        f"üî• <b>–ú–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n{task}\n\n"
        "–ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤—Ç—Ä–∞.",
        reply_markup=main_menu()
    )

# ---------- –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ----------
MENTORING_TEXT = (
    "<b>–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî —Ç–≤–æ–π –ø—É—Ç—å –∫ —Å–µ–±–µ –∏ –∂–∏–∑–Ω–∏ –Ω–∞ 100%</b>\n\n"
    "–≠—Ç–æ –Ω–µ –∫—É—Ä—Å –∏ –Ω–µ –≤–µ–±–∏–Ω–∞—Ä. –≠—Ç–æ —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –≥–¥–µ –º—ã —Å–º–æ—Ç—Ä–∏–º –Ω–µ –Ω–∞ –æ–¥–∏–Ω –∫—É—Å–æ—á–µ–∫, "
    "–∞ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å —Ü–µ–ª–∏–∫–æ–º: —Ç–µ–ª–æ –∏ —ç–Ω–µ—Ä–≥–∏—é, –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ–∂–∏–º, –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É –∏ —Ç–≤–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
    "üìå <b>–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ:</b>\n"
    "‚Ä¢ 4 –Ω–µ–¥–µ–ª–∏ ‚Äî 14 —Ç–µ–º;\n"
    "‚Ä¢ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è, —á—Ç–æ–±—ã –ø—Ä–æ–∂–∏—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è;\n"
    "‚Ä¢ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π;\n"
    "‚Ä¢ –º–æ—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ª–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞;\n"
    "‚Ä¢ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –¥–æ—Å—Ç—É–ø –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ¬´–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª—é–¥–∏¬ª, –≥–¥–µ –º—ã –∏–¥—ë–º –¥–∞–ª—å—à–µ.\n\n"
    "‚ú® <b>–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∑–∞ 4 –Ω–µ–¥–µ–ª–∏:</b>\n"
    "‚Üí —è—Å–Ω–æ—Å—Ç—å ‚Äî –ø–æ–π–º—ë—à—å, –∫—Ç–æ —Ç—ã –∏ —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ;\n"
    "‚Üí –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ –¥–æ—Ö–æ–¥;\n"
    "‚Üí —ç–Ω–µ—Ä–≥–∏—é, –∫–æ—Ç–æ—Ä–æ–π —Ö–≤–∞—Ç–∏—Ç –∏ –Ω–∞ —Ä–∞–±–æ—Ç—É, –∏ –Ω–∞ –∂–∏–∑–Ω—å;\n"
    "‚Üí —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É;\n"
    "‚Üí –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å —Ç–æ–±–æ–π –∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
    "–ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ: –∫–Ω–∏–≥–∏ –∏ –∫—É—Ä—Å—ã –¥–∞—é—Ç –∑–Ω–∞–Ω–∏—è, –Ω–æ –æ—Ç–∫–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≤ —Å—Ç–∞—Ä–æ–µ. –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –æ–¥–∏–Ω: "
    "—Ä—è–¥–æ–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫, –∏ –≤–º–µ—Å—Ç–µ –º—ã –¥–æ–≤–æ–¥–∏–º –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
    "üëâ –•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Ç–≤–æ—ë? –ñ–º–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª –∏ –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É."
)

def mentoring_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url="https://t.me/your_contact"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    return kb

@dp.callback_query_handler(lambda c: c.data == "back_to_menu")
async def back_to_menu(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ---------- –î–æ–Ω–∞—Ç—ã ----------
DONATE_TEXT = (
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:\n"
    "‚Ä¢ Tribute ‚Äî https://t.me/tribute/app?startapp=dq3\n"
    "‚Ä¢ –°–ë–ü –ø–æ QR ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∏–∂–µ."
)

# ---------- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ----------
async def broadcast_daily_question():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –¥–Ω—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."""
    if not daily_subscribers:
        return
    idx = day_index()
    q = QUESTIONS[idx]
    text = f"üß† <b>–í–æ–ø—Ä–æ—Å –¥–Ω—è</b>\n\n{q['text']}\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:"
    for uid in list(daily_subscribers):
        try:
            await bot.send_message(uid, text, reply_markup=question_keyboard(idx))
        except Exception as e:
            # –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
            if "blocked" in str(e).lower():
                daily_subscribers.discard(uid)
            log_event(uid, "daily_send_error", str(e))

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler(timezone="Europe/Moscow")
# –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –ø–æ –ú–æ—Å–∫–≤–µ
scheduler.add_job(lambda: executor._get_loop(dp).create_task(broadcast_daily_question()),
                  "cron", hour=8, minute=0, id="daily_qod", replace_existing=True)

# ===================== KEEP-ALIVE WEB =====================

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/health":
            self.send_response(200)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.end_headers()
            self.wfile.write(json.dumps({"status": "ok", "service": "telegram_bot"}).encode("utf-8"))
        else:
            self.send_response(404)
            self.end_headers()

    def log_message(self, *args, **kwargs):
        # —Ç–∏—Ö–∏–π –ª–æ–≥
        return

def run_keepalive_forever():
    while True:
        try:
            port = int(os.environ.get("PORT", "10000"))
            print(f"[keepalive] starting on 0.0.0.0:{port}", flush=True)
            server = HTTPServer(("0.0.0.0", port), HealthHandler)
            server.serve_forever()
        except Exception as e:
            print(f"[keepalive] error: {e}", flush=True)
            time.sleep(3)

# ===================== –°–¢–ê–†–¢ =====================

def _safe_polling():
    """–ó–∞—â–∏—Ç–∞ –æ—Ç –≤–Ω–µ–∑–∞–ø–Ω—ã—Ö –æ–±—Ä—ã–≤–æ–≤ polling."""
    while True:
        try:
            print("[bot] start_polling...", flush=True)
            executor.start_polling(dp, skip_updates=True)
        except Exception as e:
            print(f"[bot] polling crashed: {e}", flush=True)
            time.sleep(3)

if __name__ == "__main__":
    ensure_events_csv()

    # Keep-alive server –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –ø–æ—Ä—Ç
    threading.Thread(target=run_keepalive_forever, daemon=True).start()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    print("[scheduler] started", flush=True)

    # –°—Ç–∞—Ä—Ç—É–µ–º polling —Å –∞–≤—Ç–æ‚Äë—Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
    _safe_polling()
