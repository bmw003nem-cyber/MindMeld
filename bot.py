# bot.py ‚Äî –≤–µ—Ä—Å–∏—è —Å daily 2.0 (–≤–æ–ø—Ä–æ—Å + –º–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ + –æ—Ç–≤–µ—Ç—ã –∫–Ω–æ–ø–∫–∞–º–∏), —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –Ω–∞ –¥–∏—Å–∫–µ

import os, json, time, asyncio, csv, base64
from datetime import datetime, date
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile, ReplyKeyboardRemove, ForceReply
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ===================== CONFIG =====================
from config import (
    BOT_TOKEN, ADMIN_ID, CHANNEL_USERNAME,
    WELCOME_PHOTO, DONATION_QR,
    WELCOME_TEXT, MENTORING_TEXT, CONSULT_TEXT, GUIDES_INTRO,
    REVIEWS_TEXT, DONATE_TEXT, CONTACT_TEXT, INSIGHT_HEADER
)

# ===================== PATHS =====================
BASE_DIR = Path(__file__).resolve().parent
ASSETS = BASE_DIR / "assets"
DATA = BASE_DIR / "data"
DATA.mkdir(exist_ok=True)

INSIGHTS_JSON = ASSETS / "insights.json"   # —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤/–∏–Ω—Å–∞–π—Ç–æ–≤
DAILY_STATE_JSON = DATA / "daily_state.json"

STATS_CSV = BASE_DIR / "events.csv"

# ===================== BOT CORE =====================
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

awaiting_application = {}
awaiting_insight_reply = {}

# ===================== HELPERS =====================
def log_event(user_id: int, event: str):
    try:
        with open(STATS_CSV, "a", newline="", encoding="utf-8") as f:
            w = csv.writer(f)
            if f.tell() == 0:
                w.writerow(["ts", "user_id", "event"])
            w.writerow([datetime.now().isoformat(), user_id, event])
    except Exception as e:
        print("log_event error:", e)

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

def load_json(path: Path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path: Path, obj):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(obj, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print("save_json error:", e)

# ===================== DAILY 2.0 =====================
# –•—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å: { "user_id": {"day": int, "streak": int, "last_id": int, "last_ts": epoch } }
STATE = load_json(DAILY_STATE_JSON, {})

DAILY_FLOW = [
    {
        "id": 1,
        "question": "–£–¥–∞–ª–æ—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–¥–µ–ª–∏—Ç—å 5 –º–∏–Ω—É—Ç —Å–µ–±–µ (—Ç–∏—à–∏–Ω–∞/–¥—ã—Ö–∞–Ω–∏–µ/–ø—Ä–æ–≥—É–ª–∫–∞)?",
        "answers": ["–î–∞", "–ß–∞—Å—Ç–∏—á–Ω–æ", "–ù–µ—Ç"],
        "task_yes": "–ó–∞–∫—Ä–µ–ø–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 3 –º–∏–Ω—É—Ç—ã —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, 10 —Å–ø–æ–∫–æ–π–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤-–≤—ã–¥–æ—Ö–æ–≤.",
        "task_mid": "–°–¥–µ–ª–∞–π —Å–µ–π—á–∞—Å 60 —Å–µ–∫—É–Ω–¥ –ø–∞—É–∑—ã: –∑–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞, —Ä–∞—Å—Å–ª–∞–±—å –ø–ª–µ—á–∏, 10 —Ä–æ–≤–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤.",
        "task_no":  "–í—ã–¥–µ–ª–∏ 2 –º–∏–Ω—É—Ç—ã. –†–æ–≤–Ω–æ –¥—ã—à–∏. –ó–∞—Ç–µ–º –æ–¥–Ω–æ —Å–ª–æ–≤–æ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
        "test": "–ö–∞–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –º–∏–Ω–∏‚Äë–ø—Ä–∞–∫—Ç–∏–∫–∏?",
        "test_options": ["–ë–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏", "–°–ø–æ–∫–æ–π–Ω–µ–µ", "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"]
    },
    {
        "id": 2,
        "question": "–°–¥–µ–ª–∞–ª(–∞) –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –æ–¥–∏–Ω –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ –≤–∞–∂–Ω–æ–π —Ü–µ–ª–∏?",
        "answers": ["–î–∞", "–ù–µ–º–Ω–æ–≥–æ", "–ù–µ—Ç"],
        "task_yes": "–ó–∞–ø–∏—à–∏ 1 –º—ã—Å–ª—å/–Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥. –≠—Ç–æ —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.",
        "task_mid": "–°–¥–µ–ª–∞–π –º–∏–∫—Ä–æ—à–∞–≥ 3‚Äì5 –º–∏–Ω—É—Ç: 3 —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, 1 –∑–≤–æ–Ω–æ–∫, —á–µ—Ä–Ω–æ–≤–∏–∫ —Ñ–∞–π–ª–∞.",
        "task_no":  "–û–ø—Ä–µ–¥–µ–ª–∏ —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ (–¥–æ 3 –º–∏–Ω—É—Ç) –∏ –ø–æ—Å—Ç–∞–≤—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
        "test": "–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ—Å–ª–µ —à–∞–≥–∞?",
        "test_options": ["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–û–±–ª–µ–≥—á–µ–Ω–∏–µ", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ"]
    },
    {
        "id": 3,
        "question": "–£–¥–∞–ª–æ—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–ª–∏–ø–∞—Ç—å –≤ –ª–µ–Ω—Ç–µ —Å–æ—Ü—Å–µ—Ç–µ–π?",
        "answers": ["–î–∞", "–°—Ç–∞—Ä–∞–ª—Å—è", "–ù–µ—Ç"],
        "task_yes": "–ù–∞–≥—Ä–∞–¥–∏ —Å–µ–±—è 5 –º–∏–Ω—É—Ç–∞–º–∏ –ª—é–±–∏–º–æ–≥–æ –¥–µ–ª–∞ –±–µ–∑ —ç–∫—Ä–∞–Ω–∞.",
        "task_mid": "–¢–∞–π–º–µ—Ä 15 –º–∏–Ω—É—Ç, —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ. –°–¥–µ–ª–∞–π 1 –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ.",
        "task_no":  "–ù–∞ 10 –º–∏–Ω—É—Ç —É–±–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –≤–∏–¥–∞ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ.",
        "test": "–ö–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞?",
        "test_options": ["–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è ‚Üë", "–°–ø–æ–∫–æ–π–Ω–µ–µ", "–ü–æ–∫–∞ —Ä–∞–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å"]
    },
    {
        "id": 4,
        "question": "–ë—ã–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ç—ã –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –≤—ã–±—Ä–∞–ª —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–æ —Å–ø–æ—Ä–∞?",
        "answers": ["–î–∞", "–ò–Ω–æ–≥–¥–∞", "–ù–µ—Ç"],
        "task_yes": "–û—Ç–º–µ—Ç—å 1 –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ.",
        "task_mid": "–í —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–æ—Ä ‚Äî –ø–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ –±–µ–∑ –æ–±–≤–∏–Ω–µ–Ω–∏–π.",
        "task_no":  "–û–¥–∏–Ω —Å–ø–æ—Ä ‚Äî –ø–µ—Ä–µ–ø–∏—à–∏ –º—ã—Å–ª–µ–Ω–Ω–æ –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ (2‚Äì3 —Ñ—Ä–∞–∑—ã).",
        "test": "–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å–ª–µ –ø—Ä–∞–∫—Ç–∏–∫–∏?",
        "test_options": ["–°–ø–æ–∫–æ–π–Ω–µ–µ", "–ü—Ä–æ—è—Å–Ω–µ–Ω–∏–µ", "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"]
    },
    {
        "id": 5,
        "question": "–£–¥–∞–ª–æ—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –ª–µ—á—å —Å–ø–∞—Ç—å –≤–æ–≤—Ä–µ–º—è (¬±30 –º–∏–Ω—É—Ç –æ—Ç —Ü–µ–ª–∏)?",
        "answers": ["–î–∞", "–ü–æ—á—Ç–∏", "–ù–µ—Ç"],
        "task_yes": "–ú–∏–∫—Ä–æ–Ω–∞–≥—Ä–∞–¥–∞: 5 –º–∏–Ω—É—Ç –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –±–µ–∑ —ç–∫—Ä–∞–Ω–∞.",
        "task_mid": "–°–µ–≥–æ–¥–Ω—è ‚Äî —ç–∫—Ä–∞–Ω –∑–∞ 40 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É, –≤–æ–¥–∞, —Ç–∏—Ö–∏–π —Å–≤–µ—Ç.",
        "task_no":  "–ü–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º—è ¬´–≤ –ø–æ—Å—Ç–µ–ª–∏¬ª –Ω–∞ 10 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ, —á–µ–º –æ–±—ã—á–Ω–æ.",
        "test": "–ö–∞–∫ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å?",
        "test_options": ["–ë–æ–¥—Ä–µ–µ", "–û–∫", "–•–æ—á–µ—Ç—Å—è —Å–ø–∞—Ç—å"]
    },
    {
        "id": 6,
        "question": "–£–¥–∞–ª–æ—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ ¬´–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º¬ª –¥–µ–π—Å—Ç–≤–∏–µ–º (–µ–¥–∞/–ª–µ–Ω—Ç–∞/—Ä–µ–∞–∫—Ü–∏—è)?",
        "answers": ["–î–∞", "–ò–Ω–æ–≥–¥–∞", "–ù–µ—Ç"],
        "task_yes": "–£–∫—Ä–µ–ø–∏ –Ω–∞–≤—ã–∫: –∑–∞–≤—Ç—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∏ –≤ –¥—Ä—É–≥–æ–º —Ç—Ä–∏–≥–≥–µ—Ä–µ.",
        "task_mid": "–û—Ç–º–µ—Ç—å 1 —Ç—Ä–∏–≥–≥–µ—Ä –∏ –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É (–≤–æ–¥–∞/–¥—ã—Ö–∞–Ω–∏–µ).",
        "task_no":  "–°–µ–≥–æ–¥–Ω—è ‚Äî –æ–¥–Ω–∞ –ø–∞—É–∑–∞ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–º–æ–º.",
        "test": "–ß—Ç–æ –ø–æ–º–µ–Ω—è–ª–æ—Å—å?",
        "test_options": ["–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ë–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è", "–ù–∏—á–µ–≥–æ"]
    },
    {
        "id": 7,
        "question": "–£–¥–∞–ª–æ—Å—å –ª–∏ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ ¬´–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å–µ–±—è¬ª (–ø–æ—Ä—è–¥–æ–∫, —Å–ø–∏—Å–æ–∫, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞)?",
        "answers": ["–î–∞", "–ù–µ–º–Ω–æ–≥–æ", "–ù–µ—Ç"],
        "task_yes": "–ó–∞–ø–∏—à–∏, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏ –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ –¥–µ–Ω—å.",
        "task_mid": "–î–æ–±–∞–≤—å –æ–¥–Ω—É –≤–µ—â—å –¥–ª—è ¬´–∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ —Å–µ–±—è¬ª (–≤ —Å—É–º–∫–µ/–Ω–∞ —Å—Ç–æ–ª–µ/–≤ —Å–ø–∏—Å–∫–µ).",
        "task_no":  "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å: 2‚Äë–º–∏–Ω—É—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–≤—Ç—Ä–∞ —Å—ç–∫–æ–Ω–æ–º–∏—Ç 10 –º–∏–Ω—É—Ç.",
        "test": "–ö–∞–∫ –æ—â—É—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–±–æ—Ç—ã –æ –±—É–¥—É—â–µ–º —Å–µ–±–µ?",
        "test_options": ["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–ü–æ–∫–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"]
    }
]

def _user(uid: int):
    suid = str(uid)
    if suid not in STATE:
        STATE[suid] = {"day": 0, "streak": 0, "last_id": 0, "last_ts": 0}
    return STATE[suid]

def _save_state():
    save_json(DAILY_STATE_JSON, STATE)

def _by_id(qid: int):
    for d in DAILY_FLOW:
        if d["id"] == qid:
            return d
    return DAILY_FLOW[0]

def kb_daily_answers(qid: int, answers):
    kb = InlineKeyboardMarkup()
    for a in answers:
        kb.add(InlineKeyboardButton(a, callback_data=f"dqa:{qid}:{a}"))
    return kb

def kb_daily_test(qid: int, options):
    kb = InlineKeyboardMarkup()
    for o in options:
        kb.add(InlineKeyboardButton(o, callback_data=f"dqt:{qid}:{o}"))
    return kb

async def daily_send_question(chat, uid: int):
    u = _user(uid)
    next_id = (u["day"] % len(DAILY_FLOW)) + 1
    d = _by_id(next_id)
    u["last_id"] = d["id"]; _save_state()

    text = f"üìå <b>–í–æ–ø—Ä–æ—Å –¥–Ω—è</b> ({d['id']}/{len(DAILY_FLOW)})\n\n{d['question']}"
    await bot.send_message(chat, text, reply_markup=kb_daily_answers(d["id"], d["answers"]), parse_mode="HTML")

@dp.message_handler(commands=["daily"])
async def cmd_daily(m: types.Message):
    await daily_send_question(m.chat.id, m.from_user.id)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("dqa:"))
async def daily_answer_cb(c: types.CallbackQuery):
    _, qid, answer = c.data.split(":", 2)
    qid = int(qid)
    d = _by_id(qid)

    if answer == d["answers"][0]:
        task = d["task_yes"]
    elif answer == d["answers"][1]:
        task = d["task_mid"]
    else:
        task = d["task_no"]

    await c.message.answer(f"üéØ –ú–∏–Ω–∏‚Äë–∑–∞–¥–∞–Ω–∏–µ\n{task}\n\n–ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å ‚Äî –æ—Ç–º–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    await c.message.answer(d["test"], reply_markup=kb_daily_test(d["id"], d["test_options"]))
    await c.answer()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("dqt:"))
async def daily_test_cb(c: types.CallbackQuery):
    _, qid, result = c.data.split(":", 2)
    qid = int(qid)
    uid = c.from_user.id
    u = _user(uid)

    if u.get("last_id") == qid:
        u["day"] = (u["day"] % len(DAILY_FLOW)) + 1
        u["streak"] = u.get("streak", 0) + 1
        u["last_ts"] = int(time.time())
        _save_state()
        await c.message.answer(f"‚úÖ –ó–∞—Å—á–∏—Ç–∞–Ω–æ! –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {u['streak']} –¥–Ω–µ–π.\n–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞ ‚Üí /daily")
    else:
        await c.message.answer("–û—Ç–º–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É /daily.")
    await c.answer()

@dp.message_handler(commands=["progress"])
async def progress_cmd(m: types.Message):
    u = _user(m.from_user.id)
    await m.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å\n–î–µ–Ω—å: {max(1,u['day'])}/{len(DAILY_FLOW)}\n–°–µ—Ä–∏—è: {u['streak']} –¥–Ω–µ–π")

# ===================== MAIN MENU =====================
def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="menu_mentoring"),
        InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",  callback_data="menu_consult"),
        InlineKeyboardButton("–ì–∞–π–¥—ã",         callback_data="menu_guides"),
        InlineKeyboardButton("–û—Ç–∑—ã–≤—ã",        callback_data="menu_reviews"),
        InlineKeyboardButton("–î–æ–Ω–∞—Ç",         callback_data="menu_donate"),
        InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è",     callback_data="menu_contact"),
        InlineKeyboardButton("–í–æ–ø—Ä–æ—Å –¥–Ω—è+",   callback_data="go_daily")
    )
    return kb

@dp.callback_query_handler(Text(equals="go_daily"))
async def open_daily(c: types.CallbackQuery):
    await daily_send_question(c.message.chat.id, c.from_user.id); await c.answer()

# ===================== EXISTING HANDLERS =====================
# –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ–∏ –ø—Ä–µ–∂–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –º–µ–Ω—é –∏ –ª–æ–≥–∏–∫–∏ ‚Äî –æ–Ω–∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –∏–∑ handlers.py
from handlers import register_handlers
register_handlers(dp, bot, ADMIN_ID, CHANNEL_USERNAME, WELCOME_PHOTO, DONATION_QR,
                  WELCOME_TEXT, MENTORING_TEXT, CONSULT_TEXT, GUIDES_INTRO,
                  REVIEWS_TEXT, DONATE_TEXT, CONTACT_TEXT, INSIGHT_HEADER, ASSETS, log_event, is_subscribed)

# ===================== SCHEDULER =====================
async def send_daily_prompt():
    # –º—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–µ—á–µ—Ä–æ–º
    # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –Ω–∞–±–æ—Ä user_id
    try:
        subs = set()  # –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
        for uid in subs:
            try:
                await bot.send_message(uid, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≥–ª—è–Ω–∏ –≤ ¬´–í–æ–ø—Ä–æ—Å –¥–Ω—è¬ª ‚Üí /daily üåø")
            except Exception:
                pass
    except Exception as e:
        print("send_daily_prompt error:", e)

def setup_scheduler():
    try:
        for job in scheduler.get_jobs(): scheduler.remove_job(job.id)
    except Exception:
        pass
    scheduler.add_job(send_daily_prompt, CronTrigger(hour=19, minute=0))
    if not scheduler.running:
        scheduler.start()

# ===================== START =====================
@dp.message_handler(commands=["start"])
async def start_cmd(m: types.Message):
    try:
        if WELCOME_PHOTO and Path(WELCOME_PHOTO).exists():
            await bot.send_photo(m.chat.id, InputFile(WELCOME_PHOTO), caption=WELCOME_TEXT, reply_markup=main_menu())
        else:
            await m.answer(WELCOME_TEXT, reply_markup=main_menu())
    except Exception:
        await m.answer(WELCOME_TEXT, reply_markup=main_menu())
    log_event(m.from_user.id, "start")

if __name__ == "__main__":
    setup_scheduler()
    executor.start_polling(dp, skip_updates=True)
