import asyncio
import json
import os
from datetime import date

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import config  # –Ω–∞—à —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–∞–º–∏/—Å—Å—ã–ª–∫–∞–º–∏

# --------- –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------
bot = Bot(token=config.BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# --------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def main_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üß† –í–æ–ø—Ä–æ—Å –¥–Ω—è"), KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"))
    kb.row(KeyboardButton("üìÑ –û—Ç–∑—ã–≤—ã"), KeyboardButton("üìÇ –ì–∞–π–¥—ã"))
    kb.row(KeyboardButton("üìï –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ"), KeyboardButton("üìå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"))
    kb.add(KeyboardButton("üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"))
    return kb

def back_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

def mentorship_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url=config.MENTORSHIP_LINK))
    return kb

def consultation_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url=config.CONSULTATION_LINK))
    return kb

def reviews_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìå –ü–æ—Å—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏", url=config.REVIEWS_LINK))
    kb.add(InlineKeyboardButton("üí¨ –ß–∞—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏", url=config.REVIEWS_CHAT))
    return kb

# --------- –í–æ–ø—Ä–æ—Å –¥–Ω—è ----------
def _load_insights() -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ¬´–≤–æ–ø—Ä–æ—Å–æ–≤ –¥–Ω—è¬ª.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      - ["—Å—Ç—Ä–æ–∫–∞", ...]
      - [{"question": "...", "options": ["...","..."]}, ...]
      - [{"q": "...", "answers": ["..."]}, ...]
    """
    path = os.path.join(os.getcwd(), "insights.json")
    if not os.path.exists(path):
        return []
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        if isinstance(data, list):
            return data
    except Exception:
        pass
    return []

def get_today_question() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
      {"text": "...", "options": ["...","...", ...]}  # options –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    """
    items = _load_insights()
    if not items:
        return {"text": "–í–æ–ø—Ä–æ—Å –¥–Ω—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è. –ó–∞–≥–ª—è–Ω–∏ —á—É—Ç—å –ø–æ–∑–∂–µ üôå"}

    idx = date.today().toordinal() % len(items)
    item = items[idx]

    # —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if isinstance(item, str):
        return {"text": item}

    if isinstance(item, dict):
        text = item.get("question") or item.get("q") or item.get("text")
        opts = item.get("options") or item.get("answers") or []
        if isinstance(opts, list) and all(isinstance(x, str) for x in opts):
            return {"text": text or "–í–æ–ø—Ä–æ—Å –¥–Ω—è", "options": opts}
        return {"text": text or "–í–æ–ø—Ä–æ—Å –¥–Ω—è"}

    return {"text": "–í–æ–ø—Ä–æ—Å –¥–Ω—è"}

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(config.WELCOME_MESSAGE, reply_markup=main_kb())

# --------- –†–æ—É—Ç–∏–Ω–≥ –ø–æ –º–µ–Ω—é ----------
@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())

@dp.message_handler(lambda m: m.text == "üìï –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ")
async def mentorship(message: types.Message):
    await message.answer(config.MENTORSHIP_TEXT, reply_markup=back_kb())
    await message.answer("–ï—Å–ª–∏ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(" ", reply_markup=back_kb())  # –æ—Å—Ç–∞–≤–∏—Ç—å ¬´–ù–∞–∑–∞–¥¬ª –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    await message.answer(" ", reply_markup=types.ReplyKeyboardRemove())
    await message.answer("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(" ", reply_markup=types.ReplyKeyboardRemove())

    # –ö–Ω–æ–ø–∫–∞‚Äë—Å—Å—ã–ª–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ:", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(" ", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(" ", reply_markup=types.ReplyKeyboardRemove())
    await bot.send_message(message.chat.id, "‚úçÔ∏è –ó–∞—è–≤–∫–∞", reply_markup=consultation_kb())
    await message.answer(" ", reply_markup=back_kb())

@dp.message_handler(lambda m: m.text == "üìå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def consultation(message: types.Message):
    await message.answer(config.CONSULTATION_TEXT, reply_markup=back_kb())
    await bot.send_message(message.chat.id, "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", reply_markup=consultation_kb())

@dp.message_handler(lambda m: m.text == "üìÑ –û—Ç–∑—ã–≤—ã")
async def reviews(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å:", reply_markup=back_kb())
    await bot.send_message(message.chat.id, "–û—Ç–∑—ã–≤—ã:", reply_markup=reviews_kb())

@dp.message_handler(lambda m: m.text == "üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def support(message: types.Message):
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å
    qr_path = os.path.join("assets", "donation_qr.png")
    if os.path.exists(qr_path):
        with open(qr_path, "rb") as ph:
            await bot.send_photo(message.chat.id, ph, caption=config.SUPPORT_TEXT)
    else:
        await message.answer(config.SUPPORT_TEXT, reply_markup=back_kb())

@dp.message_handler(lambda m: m.text == "üìÇ –ì–∞–π–¥—ã")
async def guides(message: types.Message):
    text = (
        "–ì–∞–π–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª üîî\n\n"
        "–ù–∞–∂–º–∏ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É¬ª, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞ —Å–≤–æ–∏–º –ø–µ—Ä–≤—ã–º –≥–∞–π–¥–æ–º. "
        "–í–∞–∂–Ω–æ: –æ–¥–∏–Ω –≥–∞–π–¥ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞."
    )
    await message.answer(text, reply_markup=back_kb())

@dp.message_handler(lambda m: m.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
async def subscribe(message: types.Message):
    await message.answer(
        "–ö–∞–Ω–∞–ª —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏ –∏ –∞–Ω–æ–Ω—Å–∞–º–∏ —É–∂–µ —Ä—è–¥–æ–º üôÇ\n\n"
        "–û—Ç–∫—Ä–æ–π: <a href='https://t.me/vse_otvety_vnutri_nas'>t.me/vse_otvety_vnutri_nas</a>\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–µ—Ä–Ω–∏—Å—å –∑–∞ —Å–≤–æ–∏–º –≥–∞–π–¥–æ–º.",
        disable_web_page_preview=True,
        reply_markup=back_kb(),
    )

@dp.message_handler(lambda m: m.text == "üß† –í–æ–ø—Ä–æ—Å –¥–Ω—è")
async def ask_question(message: types.Message):
    q = get_today_question()
    txt = f"üß† <b>–í–æ–ø—Ä–æ—Å –¥–Ω—è</b>\n\n{q['text']}"
    kb = back_kb()
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ç—Ä–æ–∫–∞–º–∏
    options = q.get("options") or []
    if options:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for opt in options:
            kb.add(KeyboardButton(opt))
        kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    await message.answer(txt, reply_markup=kb)

# --------- Keep-alive web server (Render) ----------
async def _run_health_server():
    """
    –ü–æ–¥–Ω–∏–º–∞–µ—Ç aiohttp‚Äë—Å–µ—Ä–≤–µ—Ä –Ω–∞ PORT (Render —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç).
    /health -> {"status":"ok"}
    """
    from aiohttp import web

    async def handle_health(_):
        return web.json_response({"status": "ok", "service": "telegram_bot"})

    app = web.Application()
    app.add_routes([web.get("/health", handle_health)])

    port = int(os.getenv("PORT", "10000"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

async def on_startup(_):
    # –ó–∞–ø—É—Å–∫–∞–µ–º health‚Äë—Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å polling
    asyncio.create_task(_run_health_server())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
