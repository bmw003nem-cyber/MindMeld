import os, json, csv, asyncio, base64, threading, time, traceback
from datetime import datetime, timedelta
from typing import Dict, Any
from collections import defaultdict

# third-party
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger


from config import *
from handlers import *
from utils import *

# ===================== BOT SETUP =====================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ===================== SCHEDULER =====================
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# ===================== DATA STRUCTURES =====================
user_downloads = defaultdict(set)  # user_id -> set of downloaded guides
insights_data = load_insights()
daily_subscribers = set()  # users subscribed to daily insights

# ===================== EVENT LOGGING =====================
def log_event(user_id: int, event: str, details: str = ""):
    """Log user events to CSV for analytics"""
    try:
        with open(STATS_CSV, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([datetime.now().isoformat(), user_id, event, details])
    except Exception as e:
        print(f"Error logging event: {e}")

# ===================== KEYBOARDS =====================
def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üéØ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="mentoring"),
        InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")
    )
    kb.add(
        InlineKeyboardButton("üìö –ì–∞–π–¥—ã", callback_data="guides"),
        InlineKeyboardButton("üîÆ –í–æ–ø—Ä–æ—Å –¥–Ω—è", callback_data="insight")
    )
    kb.add(
        InlineKeyboardButton("üíé –û—Ç–∑—ã–≤—ã", callback_data="reviews"),
        InlineKeyboardButton("üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="donate")
    )
    kb.add(InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact"))
    return kb

def guides_menu():
    kb = InlineKeyboardMarkup()
    for i, (title, _) in enumerate(GUIDES):
        kb.add(InlineKeyboardButton(f"{i+1}. {title}", callback_data=f"guide_{i}"))
    kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

def back_main_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

# ===================== CHANNEL CHECK =====================
async def is_user_subscribed(user_id: int) -> bool:
    """Check if user is subscribed to the channel"""
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# ===================== HANDLERS =====================
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    log_event(user_id, "start")
    
    try:
        # Send welcome photo if exists
        if os.path.exists(WELCOME_PHOTO):
            with open(WELCOME_PHOTO, 'rb') as photo:
                await bot.send_photo(
                    user_id, 
                    photo, 
                    caption=WELCOME_TEXT,
                    reply_markup=main_menu()
                )
        else:
            await message.answer(WELCOME_TEXT, reply_markup=main_menu())
    except Exception as e:
        print(f"Error in start handler: {e}")
        await message.answer(WELCOME_TEXT, reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data == "back_main")
async def back_to_main(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(WELCOME_TEXT, reply_markup=main_menu())
    except Exception:
        # If can't edit (e.g., message is a photo), send new message
        await callback.message.answer(WELCOME_TEXT, reply_markup=main_menu())
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "mentoring")
async def mentoring_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    log_event(user_id, "mentoring_view")
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url="https://t.me/Mr_Nikto4"))
    kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    try:
        await callback.message.edit_text(MENTORING_TEXT, reply_markup=kb)
    except Exception:
        await callback.message.answer(MENTORING_TEXT, reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "consultation")
async def consultation_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    log_event(user_id, "consultation_view")
    
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url="https://t.me/Mr_Nikto4"))
    kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    try:
        await callback.message.edit_text(CONSULT_TEXT, reply_markup=kb)
    except Exception:
        await callback.message.answer(CONSULT_TEXT, reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "guides")
async def guides_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    log_event(user_id, "guides_view")
    
    try:
        await callback.message.edit_text(GUIDES_INTRO, reply_markup=guides_menu())
    except Exception:
        await callback.message.answer(GUIDES_INTRO, reply_markup=guides_menu())
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("guide_"))
async def guide_download(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    guide_idx = int(callback.data.split("_")[1])
    
    # Check if user already downloaded a guide
    if user_downloads[user_id]:
        await callback.answer("‚ùå –ú–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–∞–π–¥", show_alert=True)
        return
    
    # Check channel subscription
    if not await is_user_subscribed(user_id):
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}"))
        kb.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"check_sub_{guide_idx}"))
        kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="guides"))
        
        await callback.message.edit_text(
            "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–∞–π–¥–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=kb
        )
        await callback.answer()
        return
    
    await send_guide(callback, guide_idx)

@dp.callback_query_handler(lambda c: c.data.startswith("check_sub_"))
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    guide_idx = int(callback.data.split("_")[2])
    
    if await is_user_subscribed(user_id):
        await send_guide(callback, guide_idx)
    else:
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

async def send_guide(callback: types.CallbackQuery, guide_idx: int):
    user_id = callback.from_user.id
    title, filename = GUIDES[guide_idx]
    
    try:
        # Check if file exists
        file_path = f"guides/{filename}"
        if not os.path.exists(file_path):
            file_path = filename  # Try current directory
            
        if os.path.exists(file_path):
            with open(file_path, 'rb') as doc:
                await bot.send_document(
                    user_id,
                    doc,
                    caption=f"üìö {title}\n\n–¢–≤–æ–π –≥–∞–π–¥ –≥–æ—Ç–æ–≤! –ü—Ä–∏–º–µ–Ω—è–π –∏ –¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."
                )
            
            user_downloads[user_id].add(guide_idx)
            log_event(user_id, "guide_download", title)
            
            await callback.message.edit_text(
                f"‚úÖ –ì–∞–π–¥ '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
                reply_markup=back_main_kb()
            )
        else:
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    
    except Exception as e:
        print(f"Error sending guide: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "reviews")
async def reviews_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    log_event(user_id, "reviews_view")
    
    try:
        await callback.message.edit_text(REVIEWS_TEXT, reply_markup=back_main_kb())
    except Exception:
        await callback.message.answer(REVIEWS_TEXT, reply_markup=back_main_kb())
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "donate")
async def donate_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    log_event(user_id, "donate_view")
    
    try:
        # Send QR code if exists
        qr_path = f"assets/{DONATION_QR}"
        if not os.path.exists(qr_path):
            qr_path = DONATION_QR  # Try current directory
            
        if os.path.exists(qr_path):
            with open(qr_path, 'rb') as photo:
                await bot.send_photo(
                    user_id,
                    photo,
                    caption=DONATE_TEXT,
                    reply_markup=back_main_kb()
                )
        else:
            await callback.message.edit_text(DONATE_TEXT, reply_markup=back_main_kb())
    except Exception as e:
        print(f"Error sending donation QR: {e}")
        await callback.message.edit_text(DONATE_TEXT, reply_markup=back_main_kb())
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "contact")
async def contact_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    log_event(user_id, "contact_view")
    
    try:
        await callback.message.edit_text("–°–≤—è–∑–∞—Ç—å—Å—è: @Mr_Nikto4", reply_markup=back_main_kb())
    except Exception:
        await callback.message.answer("–°–≤—è–∑–∞—Ç—å—Å—è: @Mr_Nikto4", reply_markup=back_main_kb())
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "insight")
async def insight_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    log_event(user_id, "insight_view")
    
    # Send today's insight
    today_insight = get_today_insight()
    
    kb = InlineKeyboardMarkup()
    if user_id in daily_subscribers:
        kb.add(InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe_daily"))
    else:
        kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe_daily"))
    kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    text = f"{INSIGHT_HEADER}\n\n{today_insight}"
    try:
        await callback.message.edit_text(text, reply_markup=kb)
    except Exception:
        await callback.message.answer(text, reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "subscribe_daily")
async def subscribe_daily(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    daily_subscribers.add(user_id)
    log_event(user_id, "daily_subscribe")
    
    await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.", show_alert=True)
    
    # Update keyboard
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe_daily"))
    kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    text = get_today_content()
    await callback.message.edit_reply_markup(reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "unsubscribe_daily")
async def unsubscribe_daily(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    daily_subscribers.discard(user_id)
    log_event(user_id, "daily_unsubscribe")
    
    await callback.answer("‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞", show_alert=True)
    
    # Update keyboard
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe_daily"))
    kb.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_main"))
    
    await callback.message.edit_reply_markup(reply_markup=kb)

# ===================== ADMIN COMMANDS =====================
@dp.message_handler(commands=['stats'])
async def stats_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        stats = get_stats()
        await message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n{stats}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message_handler(commands=['broadcast'])
async def broadcast_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    # Get message text after command
    text = message.get_args()
    if not text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    # Send to all users who interacted with bot
    count = await broadcast_message(text)
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

# ===================== KEEP-ALIVE WEB SERVER =====================
import socket
from http.server import HTTPServer, BaseHTTPRequestHandler

class HealthHandler(BaseHTTPRequestHandler):
    def _respond(self):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        if self.command != "HEAD":  # —Ç–µ–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è GET
            self.wfile.write(b'{"status":"ok","service":"telegram_bot"}')

    def do_GET(self):
        self._respond()

    def do_HEAD(self):
        self._respond()

    def log_message(self, format, *args):
        pass

def _run_keepalive_forever():
    while True:
        try:
            port = int(os.environ.get("PORT", 5000))
            print(f"[keepalive] starting on 0.0.0.0:{port}", flush=True)
            
            server = HTTPServer(("0.0.0.0", port), HealthHandler)
            server.serve_forever()
        except Exception as e:
            print(f"[keepalive] crashed: {e}\n{traceback.format_exc()}", flush=True)
            time.sleep(3)

# ===================== DAILY INSIGHTS =====================
# –í–û–ü–†–û–° –î–ù–Ø + –ú–ò–ù–ò-–ó–ê–î–ê–ù–ò–Ø + –ú–ò–ù–ò-–¢–ï–°–¢ + –ü–†–û–ì–†–ï–°–°

QUESTIONS = [
    {
        "question": "–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å–ª–æ —Ç–µ–±–µ —Ä–∞–¥–æ—Å—Ç—å?",
        "task": "–ó–∞–ø–∏—à–∏ 3 –º–æ–º–µ–Ω—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω.",
        "test": [
            "–£–ª—ã–±–Ω—É–ª—Å—è –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ç—è –±—ã 3 —Ä–∞–∑–∞?",
            "–°–¥–µ–ª–∞–ª –ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω—É—é –ø–∞—É–∑—É –Ω–∞ –¥—ã—Ö–∞–Ω–∏–µ (1 –º–∏–Ω)?",
            "–°–∫–∞–∑–∞–ª –ª–∏ –¥–æ–±—Ä–æ–µ —Å–ª–æ–≤–æ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?"
        ],
    },
    {
        "question": "–ö–∞–∫–æ–µ —Ç–≤–æ—ë –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å?",
        "task": "–í—ã–¥–µ–ª–∏ 10 –º–∏–Ω—É—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ–¥—ë—Ç –∫ —Ü–µ–ª–∏ (–¥–∞–∂–µ —Å–∞–º–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ).",
        "test": [
            "–°–¥–µ–ª–∞–ª –ª–∏ —Ç—ã —Ö–æ—Ç—è –±—ã 1 —à–∞–≥ –∫ —Ü–µ–ª–∏?",
            "–û—Ç–∫–ª—é—á–∏–ª –ª–∏ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ 30‚Äì60 –º–∏–Ω—É—Ç?",
        ],
    },
    {
        "question": "–ì–¥–µ —Å–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—è–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è?",
        "task": "–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–π ¬´—Å—Ç–æ–ø-—Ä–µ–∞–∫—Ü–∏—é¬ª: –≤ –º–æ–º–µ–Ω—Ç —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è ‚Äî 3 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–∞, 3 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤—ã–¥–æ—Ö–∞.",
        "test": [
            "–£–¥–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ ¬´–ø–æ–π–º–∞—Ç—å¬ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∞–∫—Ü–∏—é?",
            "–ü–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ —Ç–µ–ª–æ –∏ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è?",
        ],
    },
    {
        "question": "–ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        "task": "–°–¥–µ–ª–∞–π –∑–∞–¥–∞—á—É –Ω–∞ 70% –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ –¥–æ–≤–µ–¥–∏ –¥–æ –∫–æ–Ω—Ü–∞ (–æ–≥—Ä–∞–Ω–∏—á—å –≤—Ä–µ–º—è).",
        "test": [
            "–ü–æ—Å—Ç–∞–≤–∏–ª –ª–∏ —Ç—ã –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–ª–æ–∂–∏–ª—Å—è –≤ –Ω–µ–≥–æ?",
            "–°–¥–µ–ª–∞–ª –ª–∏ —Ç—ã ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª, –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ?",
        ],
    },
    {
        "question": "–ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Ç–µ–ª–µ —Å–µ–≥–æ–¥–Ω—è?",
        "task": "–í—ã–±–µ—Ä–∏ 1: 15 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã / —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∫–∞–∂–¥—ã–π —á–∞—Å / –æ—Ç–∫–∞–∑ –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ –¥–æ –≤–µ—á–µ—Ä–∞.",
        "test": [
            "–ë—ã–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è —Ö–æ—Ç—è –±—ã 1 –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ–ª–∞?",
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞?",
        ],
    },
]

def _today_index() -> int:
    return (datetime.now().timetuple().tm_yday - 1) % len(QUESTIONS)

def get_today_content() -> str:
    q = QUESTIONS[_today_index()]
    text = f"ü™Ñ –í–æ–ø—Ä–æ—Å –¥–Ω—è\n\n"
    text += f"‚ùì {q['question']}\n\n"
    text += f"üìå –ú–∏–Ω–∏-–∑–∞–¥–∞–Ω–∏–µ: {q['task']}"
    if q.get("test"):
        checks = "\n".join([f"‚Ä¢ {item}" for item in q["test"]])
        text += f"\n\n‚úÖ –ú–∏–Ω–∏-—Ç–µ—Å—Ç:\n{checks}"
    text += "\n\nüìù –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ —Å—é–¥–∞."
    return text

async def send_daily_insight():
    if not daily_subscribers:
        return
    text = get_today_content()
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="daily_done"))
    for user_id in daily_subscribers.copy():
        try:
            await bot.send_message(user_id, text, reply_markup=kb)
        except Exception as e:
            print(f"[daily] fail {user_id}: {e}")
            if "bot was blocked" in str(e).lower():
                daily_subscribers.discard(user_id)
    print(f"[daily] sent to {len(daily_subscribers)} users")

# ===== –î–æ–ø. –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ =====
@dp.message_handler(lambda m: m.from_user.id in daily_subscribers)
async def daily_answer_handler(message: types.Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–Ω—è"""
    user_id = message.from_user.id
    answer = message.text.strip()
    log_event(user_id, "daily_answer", answer)
    await message.answer("‚úçÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç! –Ø –µ–≥–æ —É—á—ë–ª.")

@dp.callback_query_handler(lambda c: c.data == "daily_done")
async def daily_done_handler(callback: types.CallbackQuery):
    """–§–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = callback.from_user.id
    log_event(user_id, "daily_done")
    await callback.answer("üî• –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)

# ===================== BOT AUTO-RESTART =====================
def _run_bot_polling():
    while True:
        try:
            print("[bot] start_polling‚Ä¶", flush=True)
            executor.start_polling(dp, skip_updates=True)
            print("[bot] polling finished ‚Äî restarting", flush=True)
        except Exception as e:
            print(f"[bot] polling crashed: {e}\n{traceback.format_exc()}", flush=True)
            time.sleep(3)

def setup_scheduler():
    """Setup the scheduler for daily insights"""
    # Schedule daily insight at 8:00 Moscow time
    scheduler.add_job(
        send_daily_insight,
        CronTrigger(hour=8, minute=0, timezone="Europe/Moscow"),
        id="daily_insight"
    )
    
    scheduler.start()
    print("Scheduler started")

if __name__ == "__main__":
    # Create events.csv if it doesn't exist
    if not os.path.exists("events.csv"):
        with open("events.csv", "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp", "user_id", "event", "details"])
    
    threading.Thread(target=_run_keepalive_forever, daemon=True).start()

    ensure_images()
    ensure_pdfs()
    setup_scheduler()

    _run_bot_polling()
