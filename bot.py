import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask
import os

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")

app = Flask(__name__)

@app.route('/health')
def health():
    return "OK", 200

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="mentorship"),
         InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation"),
         InlineKeyboardButton("üìö –ì–∞–π–¥—ã", callback_data="guides")],
        [InlineKeyboardButton("üßò –í–æ–ø—Ä–æ—Å –¥–Ω—è", callback_data="question"),
         InlineKeyboardButton("üíé –û—Ç–∑—ã–≤—ã", callback_data="reviews"),
         InlineKeyboardButton("üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="support")],
        [InlineKeyboardButton("üß≠ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (30 –º–∏–Ω, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="diagnostics"),
         InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}", reply_markup=main_menu_keyboard())

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    # Flask + Telegram –±–æ—Ç –≤–º–µ—Å—Ç–µ
    import threading
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=10000), daemon=True).start()

    application.run_polling()

if __name__ == "__main__":
    main()
