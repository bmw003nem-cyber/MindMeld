import logging
import os
import pytz
import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Flask –¥–ª—è Render ping
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive", 200

@app.route('/health')
def health():
    return "OK", 200

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline –∫–Ω–æ–ø–∫–∏)
def main_menu():
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="mentorship"),
         InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consultation")],
        [InlineKeyboardButton("üß≠ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (30 –º–∏–Ω, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="diagnostics")],
        [InlineKeyboardButton("üìö –ì–∞–π–¥—ã", callback_data="guides"),
         InlineKeyboardButton("üßò –í–æ–ø—Ä–æ—Å –¥–Ω—è", callback_data="question")],
        [InlineKeyboardButton("üíé –û—Ç–∑—ã–≤—ã", callback_data="reviews"),
         InlineKeyboardButton("üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="support")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")]
    ]
    return InlineKeyboardMarkup(keyboard)

# Start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        chat_id = update.message.chat_id
        if os.path.exists("assets/welcome.jpg"):
            with open("assets/welcome.jpg", "rb") as f:
                await context.bot.send_photo(chat_id, f, caption="–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=main_menu())
        else:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "mentorship":
        text = "üìç –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî –∑–∞ 4 –Ω–µ–¥–µ–ª–∏ –º—ã —Ä–∞—Å–ø–∞–∫—É–µ–º —Ç–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —É–±–µ—Ä—ë–º –±–ª–æ–∫–∏ –∏ —Ç—ã –≤–æ–∑—å–º—ë—à—å –∂–∏–∑–Ω—å –≤ —Å–≤–æ–∏ —Ä—É–∫–∏."
    elif query.data == "consultation":
        text = "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —à–∞–≥–∏ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä—ë–¥."
    elif query.data == "diagnostics":
        text = "üß≠ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (30 –º–∏–Ω, –±–µ—Å–ø–ª–∞—Ç–Ω–æ) ‚Äî –≤—ã—è—Å–Ω—è–µ–º —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–Ω–∏–º–∞–µ–º, —Å–º–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å. –ó–∞–ø–∏—Å–∞—Ç—å—Å—è: https://t.me/m/0JIRBvZ_NmQy"
    elif query.data == "guides":
        text = "üìö –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –≥–∞–π–¥. ‚ö†Ô∏è –í–∞–∂–Ω–æ: –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–∞–π–¥."
    elif query.data == "question":
        text = "üßò –í–æ–ø—Ä–æ—Å –¥–Ω—è 2.0: –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Ç—å –≤ —Ä–µ—Å—É—Ä—Å–µ?"
    elif query.data == "reviews":
        text = "üíé –û—Ç–∑—ã–≤—ã: https://t.me/+4Ov29pR6uj9iYjgy"
    elif query.data == "support":
        if os.path.exists("assets/qr.png"):
            with open("assets/qr.png", "rb") as f:
                await context.bot.send_photo(query.message.chat_id, f, caption="üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ QR-–∫–æ–¥—É.")
            return
        text = "üôè –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ QR-–∫–æ–¥—É."
    elif query.data == "contact":
        text = "üìû –°–≤—è–∑–∞—Ç—å—Å—è: https://t.me/Mr_Nikto4"
    else:
        text = "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é:"

    await query.edit_message_text(text=text, reply_markup=main_menu())

# Echo –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å –¥–Ω—è)
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! üôè", reply_markup=main_menu())

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # Flask –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=10000), daemon=True).start()

    application.run_polling()

if __name__ == "__main__":
    main()
