import logging
import os
from datetime import time as dtime, datetime
import pytz
from threading import Thread

from flask import Flask
from telegram import (
    Update, InputFile, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ================== SETTINGS ==================
# Token ONLY from environment (Render ‚Üí Environment ‚Üí BOT_TOKEN)
BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()

# Channel for subscription check
CHANNEL_USERNAME = "@vse_otvety_vnutri_nas"
CHANNEL_ID = ""  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º

# Fixed links (as provided)
REVIEWS_CHANNEL_URL = "https://t.me/+4Ov29pR6uj9iYjgy"
REVIEWS_POST_URL    = "https://t.me/vse_otvety_vnutri_nas/287"
TRIBUTE_URL         = "https://t.me/tribute/app?startapp=dq3J"
CONTACT_TG_URL      = "https://t.me/Mr_Nikto4"
DIAGNOSTIC_URL      = "https://t.me/m/0JIRBvZ_NmQy"

# File paths
WELCOME_PHOTO_PATH = "assets/welcome.jpg"
QR_PHOTO_PATH      = "assets/qr.png"
GUIDE_FILES = {
    "path_to_self": "guide_path_to_self.pdf",
    "know_but_dont_do": "guide_know_but_dont_do.pdf",
    "self_acceptance": "guide_self_acceptance.pdf",
    "shut_the_mind": "guide_shut_the_mind.pdf",
}

# ================== TEXTS ==================
WELCOME_TEXT = (
    "<b>üëã –ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –º–æ—ë–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ!</b>\n\n"
    "–Ø ‚Äî –†–æ–º–∞–Ω, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –£–∂–µ –±–æ–ª–µ–µ 200 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –ø—Ä–∞–∫—Ç–∏–∫—É—é –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏—Å—Å–ª–µ–¥—É—é, "
    "–∫–∞–∫ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –º–µ–Ω—è—é—Ç –∂–∏–∑–Ω—å –≤ –¥–æ–ª–≥—É—é. –ó–∞ 8 –ª–µ—Ç —è –ø—Ä–æ—à—ë–ª –ø—É—Ç—å –æ—Ç ¬´–∂–∏–≤—É –ø–æ –∏–Ω–µ—Ä—Ü–∏–∏¬ª –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ–≥–¥–∞ —Å–∞–º "
    "—Å–æ–∑–¥–∞—é —Å–≤–æ—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∑–Ω–∞—é, —á–µ–≥–æ —Ö–æ—á—É.\n\n"
    "–í —ç—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —è –¥–µ–ª—é—Å—å —Ç–µ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
    "üîß –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ —è—Å–Ω–æ—Å—Ç–∏,\n"
    "üéØ —Å–ø–æ—Å–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–≤–æ—ë –¥–µ–ª–æ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –µ–≥–æ,\n"
    "üß† –æ–ø—ã—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—á–∏—Ç–∞—Ç—å –∏ –∑–Ω–∞—Ç—å¬ª, –∞ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å.\n\n"
    "<u>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –≤ —ç—Ç–æ–º –±–æ—Ç–µ:</u>\n"
    "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
    "‚Ä¢ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã (–ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª)\n"
    "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞\n"
    "‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ ¬´–í–æ–ø—Ä–æ—Å –¥–Ω—è¬ª\n\n"
    "üîë –í—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —ç—Ç–æ —É—Å–ª—ã—à–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–µ–π –æ–ø–æ—Ä–æ–π."
)

MENTORSHIP_TEXT = (
    "<b>–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî —Ç–≤–æ–π –ø—É—Ç—å –∫ —Å–µ–±–µ –∏ –∂–∏–∑–Ω–∏ –Ω–∞ 100%</b>\n\n"
    "–≠—Ç–æ –Ω–µ –∫—É—Ä—Å –∏ –Ω–µ –≤–µ–±–∏–Ω–∞—Ä. –≠—Ç–æ —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –≥–¥–µ –º—ã —Å–º–æ—Ç—Ä–∏–º –Ω–µ –Ω–∞ –æ–¥–∏–Ω –∫—É—Å–æ—á–µ–∫, "
    "–∞ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å —Ü–µ–ª–∏–∫–æ–º: —Ç–µ–ª–æ –∏ —ç–Ω–µ—Ä–≥–∏—é, –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ–∂–∏–º, –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É –∏ —Ç–≤–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
    "üìå <b>–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ:</b>\n"
    "‚Ä¢ 4 –Ω–µ–¥–µ–ª–∏ ‚Äî 14 —Ç–µ–º;\n"
    "‚Ä¢ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è, —á—Ç–æ–±—ã –ø—Ä–æ–∂–∏—Ç—å –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è;\n"
    "‚Ä¢ –∑–∞–∫—Ä—ã—Ç—ã–π Telegram-–∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π;\n"
    "‚Ä¢ –º–æ—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –ª–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞;\n"
    "‚Ä¢ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –¥–æ—Å—Ç—É–ø –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ¬´–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª—é–¥–∏¬ª, –≥–¥–µ –º—ã –∏–¥—ë–º –¥–∞–ª—å—à–µ.\n\n"
    "‚ú® <b>–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∑–∞ 4 –Ω–µ–¥–µ–ª–∏:</b>\n"
    "‚Ä¢ —è—Å–Ω–æ—Å—Ç—å ‚Äî –ø–æ–π–º—ë—à—å, –∫—Ç–æ —Ç—ã –∏ —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ;\n"
    "‚Ä¢ –¥–µ–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ –¥–æ—Ö–æ–¥;\n"
    "‚Ä¢ —ç–Ω–µ—Ä–≥–∏—é, –∫–æ—Ç–æ—Ä–æ–π —Ö–≤–∞—Ç–∏—Ç –∏ –Ω–∞ —Ä–∞–±–æ—Ç—É, –∏ –Ω–∞ –∂–∏–∑–Ω—å;\n"
    "‚Ä¢ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É;\n"
    "‚Ä¢ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å —Ç–æ–±–æ–π –∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
    "–ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ: –∫–Ω–∏–≥–∏ –∏ –∫—É—Ä—Å—ã –¥–∞—é—Ç –∑–Ω–∞–Ω–∏—è, –Ω–æ –æ—Ç–∫–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ç–µ–±—è –≤ —Å—Ç–∞—Ä–æ–µ. "
    "–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –Ω–µ –æ–¥–∏–Ω: —Ä—è–¥–æ–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫, –∏ –≤–º–µ—Å—Ç–µ –º—ã –¥–æ–≤–æ–¥–∏–º –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
    "üëâ <b>–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Ç–≤–æ—ë?</b> –ñ–º–∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª –∏ –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É."
)

CONSULTATION_TEXT = (
    "<b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî 60 –º–∏–Ω—É—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–¥–≤–∏–Ω—É—Ç—å—Å—è —Å –º–µ—Å—Ç–∞</b>\n\n"
    "–≠—Ç–æ –ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å–æ –º–Ω–æ–π 1-–Ω–∞-1 (–æ–Ω–ª–∞–π–Ω). –ó–∞ —á–∞—Å –º—ã —Ä–∞–∑–±–∏—Ä–∞–µ–º —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–±–∏—Ä–∞–µ–º <b>–ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω</b>, "
    "—Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ. <b>–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞—ë—Ç—Å—è —É —Ç–µ–±—è.</b>\n\n"
    "üìç <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>\n"
    "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ—é —Ç–æ—á–∫—É –ê ‚Äî –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å.\n"
    "‚Ä¢ –†–∞–∑–±–µ—Ä—ë–º, —á—Ç–æ –º–µ—à–∞–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è.\n"
    "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–æ—á–∫—É –ë ‚Äî —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å.\n"
    "‚Ä¢ –°–ª–æ–∂–∏–º –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ 14‚Äì30 –¥–Ω–µ–π.\n\n"
    "üî• <b>–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—à—å:</b>\n"
    "‚Ä¢ —è—Å–Ω–æ—Å—Ç—å, –∫—É–¥–∞ –∏–¥—Ç–∏ –∏ –∑–∞—á–µ–º,\n"
    "‚Ä¢ —á—ë—Ç–∫–∏–µ —à–∞–≥–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å,\n"
    "‚Ä¢ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫ –æ–±—Ö–æ–¥–∏—Ç—å –±–ª–æ–∫–∏ –∏ –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.\n\n"
    "<b>–§–æ—Ä–º–∞—Ç:</b> –æ–Ω–ª–∞–π–Ω (Google Meet/Zoom). <b>60 –º–∏–Ω—É—Ç.</b>\n"
    "–ü–æ—Å–ª–µ ‚Äî –∑–∞–ø–∏—Å—å –∏ –ø–ª–∞–Ω –æ—Å—Ç–∞—é—Ç—Å—è —É —Ç–µ–±—è.\n\n"
    "üëâ –ñ–º–∏ <b>¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª</b>, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –≥–æ–ª–æ–≤–µ –∏ —É–≤–∏–¥–µ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å.\n\n"
    "<i>–°–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?</i> –ñ–º–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É¬ª ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, 30 –º–∏–Ω—É—Ç."
)

GUIDES_HEADER = (
    "<b>–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –≥–∞–π–¥</b>\n"
    "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ø–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ <b>—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω</b> –≥–∞–π–¥ (—á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–ø—ã–ª—è—Ç—å—Å—è –∏ –¥–æ–π—Ç–∏ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞).\n\n"
    "–ö–∞–∂–¥—ã–π –≥–∞–π–¥ ‚Äî —ç—Ç–æ <b>–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π PDF</b> —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –Ω–∞ 20‚Äì40 –º–∏–Ω—É—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´–ø–æ–Ω—è—Ç—å¬ª, "
    "–∞ <b>—Å–¥–µ–ª–∞—Ç—å</b>.\n\n"
    "üí° –ü–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª ‚Äî –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."
)

DIAG_TEXT = (
    "<b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî 30 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ—â–∏</b>\n\n"
    "–≠—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å–æ –º–Ω–æ–π, –≥–¥–µ –º—ã:\n"
    "‚Ä¢ –ø—Ä–æ—è—Å–Ω—è–µ–º —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ —Ü–µ–ª—å;\n"
    "‚Ä¢ —Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –º–µ—à–∞–µ—Ç —Å–µ–π—á–∞—Å;\n"
    "‚Ä¢ —Ä–µ—à–∞–µ–º, –ø–æ–¥–æ–π–¥—ë—Ç –ª–∏ —Ç–µ–±–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ, –∏ —á–µ–º –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç;\n"
    "‚Ä¢ –¥–∞—é 1‚Äì2 —à–∞–≥–∞, —Å –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.\n\n"
    "üîé –¶–µ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ‚Äî –ø–æ–Ω—è—Ç—å, <b>–ø–æ–¥—Ö–æ–∂—É –ª–∏ —è —Ç–µ–±–µ –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫</b> –∏ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Å—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
    "üëâ <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:</b> –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ."
)

QUESTION_INTROS = [
    ("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è —Ç—ã —É–¥–µ–ª–∏—à—å —Å–µ–±–µ (—á–∏—Å—Ç–æ–º—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—é)?",
     ["2 –º–∏–Ω", "5 –º–∏–Ω", "10 –º–∏–Ω", "20+ –º–∏–Ω"]),
    ("–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–∞—Å—Ç —Ç–µ–±–µ –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏?",
     ["–°–æ–Ω", "–î–≤–∏–∂–µ–Ω–∏–µ", "–¢–∏—à–∏–Ω–∞/–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–í–æ–¥–∞/–ø–∏—Ç–∞–Ω–∏–µ"]),
    ("–ì–¥–µ —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–µ–Ω –æ–¥–∏–Ω —á–µ—Å—Ç–Ω—ã–π —à–∞–≥?",
     ["–ó–¥–æ—Ä–æ–≤—å–µ", "–î–µ–ª–æ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–î–æ–º/–±—ã—Ç"]),
    ("–ß—Ç–æ —Ç—ã –≥–æ—Ç–æ–≤ –æ—Ç–ø—É—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
     ["–°–æ–º–Ω–µ–Ω–∏—è", "–°–ø–µ—à–∫—É", "–ö–æ–Ω—Ç—Ä–æ–ª—å", "–û–ø—Ä–∞–≤–¥–∞–Ω–∏—è"]),
    ("–ö–∞–∫–æ–π –º–∏–Ω–∏–º—É–º —Å–¥–µ–ª–∞–µ—à—å –ø—Ä–∏ –ª—é–±–æ–π –ø–æ–≥–æ–¥–µ?",
     ["1 –¥–µ–π—Å—Ç–≤–∏–µ", "3 –¥–µ–π—Å—Ç–≤–∏—è", "5 –¥–µ–π—Å—Ç–≤–∏–π", "–°–Ω–∞—á–∞–ª–∞ 1 ‚Äî –ø–æ—Ç–æ–º –µ—â—ë"]),
]

# ============== Keep-alive HTTP (for Render Web Service + UptimeRobot) ==============
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running"

@app.route("/health")
def health():
    return "ok"

def run_http():
    port = int(os.environ.get("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)

def keep_alive():
    t = Thread(target=run_http, daemon=True)
    t.start()

# ============== Keyboards ==============
def main_menu_kb():
    rows = [
        [KeyboardButton("üéØ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ"), KeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"), KeyboardButton("üìö –ì–∞–π–¥—ã")],
        [KeyboardButton("üîÆ –í–æ–ø—Ä–æ—Å –¥–Ω—è"), KeyboardButton("üíé –û—Ç–∑—ã–≤—ã"), KeyboardButton("üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")],
        [KeyboardButton("üß≠ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (30 –º–∏–Ω, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)")],
        [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è")],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def back_inline_kb():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])

def mentorship_kb():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="leave_request_mentorship"),
    ], [
        InlineKeyboardButton("üß≠ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", url=DIAGNOSTIC_URL)
    ], [
        InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ]])

def consultation_kb():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="leave_request_consultation"),
    ], [
        InlineKeyboardButton("üß≠ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", url=DIAGNOSTIC_URL)
    ], [
        InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ]])

def guides_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—É—Ç—å –∫ —Å–µ–±–µ", callback_data="guide:path_to_self")],
        [InlineKeyboardButton("–ó–Ω–∞—é, –Ω–æ –Ω–µ –¥–µ–ª–∞—é", callback_data="guide:know_but_dont_do")],
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–µ–±—è", callback_data="guide:self_acceptance")],
        [InlineKeyboardButton("–ó–∞—Ç–∫–Ω—É—Ç—å –º–æ–∑–≥", callback_data="guide:shut_the_mind")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ])

def reviews_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏", url=REVIEWS_CHANNEL_URL)],
        [InlineKeyboardButton("–ü–æ—Å—Ç‚Äë–ø–æ–¥–±–æ—Ä–∫–∞", url=REVIEWS_POST_URL)],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ])

def support_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å Tribute", url=TRIBUTE_URL)],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ])

def diagnostics_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", url=DIAGNOSTIC_URL)],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
    ])

# ============== State ==============
USER_STATE = {}
USER_GUIDE_RECEIVED = set()

# ============== Handlers ==============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        with open(WELCOME_PHOTO_PATH, "rb") as f:
            await context.bot.send_photo(chat_id, photo=f, caption=WELCOME_TEXT,
                                         parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())
    except Exception:
        await context.bot.send_message(chat_id, WELCOME_TEXT, parse_mode=ParseMode.HTML, reply_markup=main_menu_kb())

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "üéØ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ":
        await update.message.reply_text(MENTORSHIP_TEXT, parse_mode=ParseMode.HTML, reply_markup=mentorship_kb()); return
    if text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await update.message.reply_text(CONSULTATION_TEXT, parse_mode=ParseMode.HTML, reply_markup=consultation_kb()); return
    if text == "üìö –ì–∞–π–¥—ã":
        await update.message.reply_text(GUIDES_HEADER, parse_mode=ParseMode.HTML, reply_markup=guides_kb()); return
    if text == "üîÆ –í–æ–ø—Ä–æ—Å –¥–Ω—è":
        await send_qod_entry(update, context); return
    if text == "üíé –û—Ç–∑—ã–≤—ã":
        await update.message.reply_text("–û—Ç–∑—ã–≤—ã:", reply_markup=reviews_kb()); return
    if text == "üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å":
        await send_support(update, context); return
    if text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è":
        await update.message.reply_text("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π:", reply_markup=
            InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url=CONTACT_TG_URL)],
                                  [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])); return
    if text == "üß≠ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (30 –º–∏–Ω, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)":
        await update.message.reply_text(DIAG_TEXT, parse_mode=ParseMode.HTML, reply_markup=diagnostics_kb()); return
    await update.message.reply_text("–í—ã–±–∏—Ä–∞–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_menu_kb())

async def send_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    caption = (f"<b>–ë–æ–¥–æ–Ω–µ–Ω–∫–æ–≤ –†–æ–º–∞–Ω –í–∞–ª–µ—Ä—å–µ–≤–∏—á</b>\n"
               "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ 5388079294\n\n"
               "<b>üíõ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</b>\n"
               "–î–µ–Ω—å–≥–∏ ‚Äî —ç—Ç–æ —ç–Ω–µ—Ä–≥–∏—è. –ï—Å–ª–∏ —Ç–æ, —á—Ç–æ —è –¥–µ–ª–∞—é, —Ü–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è, –∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –æ–±–º–µ–Ω —ç–Ω–µ—Ä–≥–∏–µ–π ‚Äî "
               "–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –≤ –ª—é–±–æ–π —Å—É–º–º–µ.\n\n"
               "<b>–°–ø–æ—Å–æ–±—ã:</b>\n"
               f"‚Ä¢ Tribute ‚Äî –æ—Ç–∫—Ä–æ–π –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
               "‚Ä¢ –°–ë–ü –ø–æ QR ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∏–∂–µ.\n\n"
               "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∫–ª–∞–¥ ‚Äî –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ —Ü–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ üôå")
    try:
        with open(QR_PHOTO_PATH, "rb") as f:
            await context.bot.send_photo(chat_id, photo=f, caption=caption, parse_mode=ParseMode.HTML,
                                         reply_markup=support_kb()); return
    except Exception:
        pass
    await context.bot.send_message(chat_id, caption, parse_mode=ParseMode.HTML, reply_markup=support_kb())

# === Guides ===
async def on_guide_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "back_to_menu":
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb()); return

    if data.startswith("guide:"):
        if query.from_user.id in USER_GUIDE_RECEIVED:
            await query.message.reply_text(
                "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –≥–∞–π–¥. –ó–∞–∫—Ä–æ–π —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª ‚Äî –∏ –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞ —ç—Ñ–∏—Ä/–≤ –º–∞—Å—Ç–µ—Ä‚Äë—Ä–∞–∑–±–æ—Ä.",
                reply_markup=back_inline_kb()); return

        key = data.split(":")[1]
        filename = GUIDE_FILES.get(key)
        if not filename:
            await query.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_inline_kb()); return

        # subscription check
        allow = True
        try:
            channel = CHANNEL_ID or CHANNEL_USERNAME
            member = await context.bot.get_chat_member(chat_id=channel, user_id=query.from_user.id)
            status = getattr(member, "status", "left")
            allow = status in ("member", "administrator", "creator")
        except Exception as e:
            logging.warning("Channel check failed: %s", e)

        if not allow:
            await query.message.reply_text("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∏ –¥–æ—Å—Ç—É–ø –∫ –≥–∞–π–¥–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è. üëç",
                                           reply_markup=back_inline_kb()); return

        try:
            with open(filename, "rb") as f:
                await query.message.reply_document(InputFile(f, filename=filename),
                                                   caption="–î–µ—Ä–∂–∏! –ü—É—Å—Ç—å –∑–∞–π–¥—ë—Ç –≤ —Ä–∞–±–æ—Ç—É —Å–µ–≥–æ–¥–Ω—è.",
                                                   reply_markup=back_inline_kb())
            USER_GUIDE_RECEIVED.add(query.from_user.id)
        except FileNotFoundError:
            await query.message.reply_text("PDF –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ñ–∞–π–ª –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º.",
                                           reply_markup=back_inline_kb())
        return

# === Question of the Day 2.0 ===
async def send_qod_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id if update.message else update.callback_query.message.chat_id
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="qod:start")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await context.bot.send_message(chat_id, "<b>–í–æ–ø—Ä–æ—Å –¥–Ω—è</b>\n–ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ —Å–µ–≥–æ–¥–Ω—è ‚Äî –±–æ–ª—å—à–æ–π —Å–¥–≤–∏–≥ –∑–∞ –º–µ—Å—è—Ü. "
                                            "–û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ –¥–ª—è —Å–µ–±—è: —ç—Ç–æ –∑–∞–π–º—ë—Ç 30‚Äì60 —Å–µ–∫—É–Ω–¥. "
                                            "(–î–æ—Å—Ç—É–ø–µ–Ω –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç.)",
                                   parse_mode=ParseMode.HTML, reply_markup=kb)

async def qod_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()
    uid = q.from_user.id

    if data == "back_to_menu":
        await q.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb()); return

    if data == "qod:start":
        USER_STATE[uid] = {"stage": "choose_mode"}
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", callback_data="qod:variants")],
            [InlineKeyboardButton("–°–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data="qod:free")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        await q.message.reply_text("–ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—à—å?\n‚Ä¢ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç;\n‚Ä¢ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç.", reply_markup=kb); return

    if data == "qod:variants":
        USER_STATE[uid] = {"stage": "variants"}
        idx = datetime.now().weekday() % len(QUESTION_INTROS)
        question, options = QUESTION_INTROS[idx]
        USER_STATE[uid]["question"] = question
        kb = InlineKeyboardMarkup([[InlineKeyboardButton(opt, callback_data=f"qod:pick:{opt}")] for opt in options] +
                                  [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        await q.message.reply_text(question, reply_markup=kb); return

    if data.startswith("qod:pick:"):
        choice = data.split(":", 2)[2]
        st = USER_STATE.get(uid, {})
        st["choice"] = choice
        st["stage"] = "after_pick"
        USER_STATE[uid] = st
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="qod:add_comment")],
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="qod:done")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        await q.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ\n–°–æ—Ö—Ä–∞–Ω–∏ –¥–ª—è —Å–µ–±—è: {choice}.\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤?",
                                   reply_markup=kb); return

    if data == "qod:add_comment":
        USER_STATE[uid]["stage"] = "await_comment"
        await q.message.reply_text("–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ß—Ç–æ –≤–∞–∂–Ω–æ–≥–æ –¥–ª—è —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"); return

    if data == "qod:done":
        await q.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–∞–ª—å–Ω—ã–π —à–∞–≥. –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ ‚úåÔ∏è",
                                   reply_markup=InlineKeyboardMarkup([[
                                       InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="qod:remind")
                                   ], [
                                       InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                                   ]]))
        USER_STATE.pop(uid, None); return

    if data == "qod:remind":
        tz = pytz.timezone("Europe/Moscow")
        job_name = f"qodremind_{uid}"
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
        context.job_queue.run_daily(qod_reminder, dtime(hour=9, minute=0, tzinfo=tz), name=job_name, data=uid)
        await q.message.reply_text("–ù–∞–ø–æ–º–Ω—é –∑–∞–≤—Ç—Ä–∞ –≤ 09:00. –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /stopremind.",
                                   reply_markup=back_inline_kb()); return

async def qod_reminder(ctx: ContextTypes.DEFAULT_TYPE):
    uid = ctx.job.data
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="qod:start")]])
    await ctx.bot.send_message(uid, "–í–æ–ø—Ä–æ—Å –¥–Ω—è ‚ú®", reply_markup=kb)

async def stop_remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    name = f"qodremind_{uid}"
    for job in context.job_queue.get_jobs_by_name(name):
        job.schedule_removal()
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.", reply_markup=main_menu_kb())

# === Free text for QOD comment OR normal routing ===
async def message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = USER_STATE.get(uid)
    if st and st.get("stage") == "await_comment":
        txt = (update.message.text or "").strip()
        USER_STATE.pop(uid, None)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–∏—Å–∞–ª ‚úÖ\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ ‚Äî –±—É–¥–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
                                        reply_markup=InlineKeyboardMarkup([[
                                            InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="qod:remind")
                                        ], [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]))
        return
    else:
        await handle_text(update, context)

# === Callbacks common ===
async def callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    if data.startswith("guide:") or data == "back_to_menu":
        await on_guide_choice(update, context); return
    if data.startswith("qod:"):
        await qod_callbacks(update, context); return
    if data == "leave_request_mentorship":
        await q.message.reply_text("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: ",
                                   reply_markup=InlineKeyboardMarkup([[
                                       InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –†–æ–º–∞–Ω—É", url=CONTACT_TG_URL)
                                   ], [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])); return
    if data == "leave_request_consultation":
        await q.message.reply_text("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: ",
                                   reply_markup=InlineKeyboardMarkup([[
                                       InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –†–æ–º–∞–Ω—É", url=CONTACT_TG_URL)
                                   ], [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])); return

def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN env var is empty. Set it in Render ‚Üí Environment.")
    # Start tiny HTTP server for Render/UptimeRobot
    keep_alive()

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("stopremind", stop_remind))

    app.add_handler(CallbackQueryHandler(callbacks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_router))

    logging.info("Bot started.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
